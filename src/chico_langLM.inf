

!!==============================================================================
!!
!!	EL CHICO
!!	Mensajes de la librería (basados en 'Spanish.h')
!!
!!==============================================================================
!!
!!	Archivo:		chico_langLM.inf
!!	Autor(es):		J. Francisco Martín <jfm.lisaso@gmail.com>
!!	Idioma:			ES (Castellano)
!!	Sistema:		Inform-INFSP 6
!!	Plataforma:		Máquina-Z / GLULX
!!	Versión:		1.0
!!	Fecha:			2015/01/29
!!	Notas:			Se han personalizado los siguientes mensajes:
!!					 -	##Pray
!!
!!------------------------------------------------------------------------------
!!
!!	# HISTORIAL DE VERSIONES
!!
!!	1.0: 2015/01/29	Versión inicial.
!!
!!------------------------------------------------------------------------------
!!
!!	This program is free software; you can redistribute it and/or modify
!!	it under the terms of the GNU General Public License as published by
!!	the Free Software Foundation; either version 2 of the License, or
!!	(at your option) any later version.
!!
!!	This program is distributed in the hope that it will be useful,
!!	but WITHOUT ANY WARRANTY; without even the implied warranty of
!!	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!!	GNU General Public License for more details.
!!
!!	You should have received a copy of the GNU General Public License along
!!	with this program; if not, write to the Free Software Foundation, Inc.,
!!	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Or see
!!	<http://www.gnu.org/licenses/>.
!!
!!	Copyright (C) 2015, J. Francisco Martín
!!
!!------------------------------------------------------------------------------


Default _grammatical_inflection 2;


[ LanguageLM n x1;

	Answer, Ask, AskFor, Order, Tell:
		print_ret (parser) "Para iniciar una conversación, usa 
		simplemente la orden HABLA (a/con) PERSONAJE.";

!!	Ask:	see Answer
!!	AskFor:	see Answer

	Attack:
		switch (_grammatical_inflection) {
		1,2,3:	"La violencia no es la solución.";
		4,5,6:	"La violencia no era la solución.";
		}

	Blow:
		switch (_grammatical_inflection) {
		1:	"Mi soplido no produce ningún efecto.";
		2:	"Tu soplido no produce ningún efecto.";
		3:	"Su soplido no produce ningún efecto.";
		4:	"Mi soplido no produjo ningún efecto.";
		5:	"Tu soplido no produjo ningún efecto.";
		6:	"Su soplido no produjo ningún efecto.";
		}

! TODO - Personalizar mensaje
	Burn:
		!! -- "Con esa peligrosa acción no lograrías nada.";
		switch (_grammatical_inflection) {
		1:	"Con esa peligrosa acción no iba a lograr nada.";
		2:	"Con esa peligrosa acción no ibas a lograr nada.";
		3:	"Con esa peligrosa acción no iba a lograr nada.";
		4:	"Con esa peligrosa acción no hubiese logrado nada.";
		5:	"Con esa peligrosa acción no hubieses logrado nada.";
		6:	"Con esa peligrosa acción no hubiese logrado nada.";
		}

	Buy:
		switch (_grammatical_inflection) {
		1,2,3:	"No hay nada en venta.";
		4,5,6:	"No había nada en venta.";
		}

	Climb:
		!! -- "No creo que vayas a lograr nada así.";
		switch (_grammatical_inflection) {
		1:	"No creo que vaya a lograr nada así.";
		2:	"En realidad no crees que vayas a lograr nada así.";
		3:	"En realidad no cree que vaya a lograr nada así.";
		4:	"No creo que hubiese logrado nada así.";
		5:	"En realidad no crees que hubieses logrado nada así.";
		6:	"En realidad no cree que hubiese logrado nada así.";
		}

	Close:
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"No es algo que pueda cerrarse.";
				4,5,6:	"No era algo que se pudiese cerrar.";
				}
			2:	"Ya estaba", (n) x1, " cerrad", (o) x1, ".";
			3:	switch (_grammatical_inflection) {
				1:	"Cierro ", (the) x1, ".";
				2:	"Cierras ", (the) x1, ".";
				3:	"Cierra ", (the) x1, ".";
				4:	"Cerré ", (the) x1, ".";
				5:	"Cerraste ", (the) x1, ".";
				6:	"Cerró ", (the) x1, ".";
				}
		}

	CommandsOff:
		switch (n) {
			1:	print_ret (parser) "Grabación de órdenes finalizada.";
			#Ifdef TARGET_GLULX;
			2:	print_ret (parser) "La grabación de órdenes ya estaba 
				finalizada.";
			#Endif; ! TARGET_
		}

	CommandsOn:
		switch (n) {
			1:	print_ret (parser) "Grabación de órdenes activada.";
			#Ifdef TARGET_GLULX;
			2:	print_ret (parser) "Órdenes relanzadas.";
			3:	print_ret (parser) "Grabación de órdenes ya activada.";
			4:	print_ret (parser) "Fallo en la grabación de órdenes.";
			#Endif; ! TARGET_
		}

	CommandsRead:
		switch (n) {
			1:	print_ret (parser) "Relanzando acciones.";
			#Ifdef TARGET_GLULX;
			2:	print_ret (parser) "Las órdenes ya están siendo 
				relanzadas.";
			3:	print_ret (parser) "Fallo en la reejecución de órdenes: 
				grabación en curso.";
			4:	print_ret (parser) "Fallo en la reejecución de órdenes.";
			5:	print_ret (parser) "Acciones ejecutadas: fin del proceso.";
			#Endif; ! TARGET_
		}

	Consult:
		switch (_grammatical_inflection) {
		1:	"No descubro nada interesante en ", (the) x1, " sobre ese tema.";
		2:	"No descubres nada interesante en ", (the) x1, " sobre ese tema.";
		3:	"No descubre nada interesante en ", (the) x1, " sobre ese tema.";
		4:	"No descubrí nada interesante en ", (the) x1, " sobre ese tema.";
		5:	"No descubriste nada interesante en ", (the) x1," sobre ese tema.";
		6:	"No descubrió nada interesante en ", (the) x1, " sobre ese tema.";
		}

	Cut:
		switch (_grammatical_inflection) {
		1:	"Cortándo", (lo) x1, " no lograré gran cosa.";
		2:	"Cortándo", (lo) x1, " no lograrás gran cosa.";
		3:	"Cortándo", (lo) x1, " no logrará gran cosa.";
		4:	"Cortándo", (lo) x1, " no hubiese logrado gran cosa.";
		5:	"Cortándo", (lo) x1, " no hubieses logrado gran cosa.";
		6:	"Cortándo", (lo) x1, " no hubiese logrado gran cosa.";
		}

	Dig:
		switch (_grammatical_inflection) {
		1,2,3:	"Excavar no servirá de nada aquí.";
		4,5,6:	"Excavar no hubiese servido de nada allí.";
		}

	Disrobe:
		switch (n) {
			!! -- "No llevas puesto eso.";
			1: switch (_grammatical_inflection) {
				1:	"No ", (lo) x1, " llevo puest", (o) x1, ".";
				2:	"No ", (lo) x1, " llevas puest", (o) x1, ".";
				3:	"No ", (lo) x1, " lleva puest", (o) x1, ".";
				4:	"No ", (lo) x1, " llevaba puest", (o) x1, ".";
				5:	"No ", (lo) x1, " llevabas puest", (o) x1, ".";
				6:	"No ", (lo) x1, " llevaba puest", (o) x1, ".";
				}
			2:	switch (_grammatical_inflection) {
				1:	"Me quito ", (the) x1, ".";
				2:	"Te quitas ", (the) x1, ".";
				3:	"Se quita ", (the) x1, ".";
				4:	"Me quité ", (the) x1, ".";
				5:	"Te quitaste ", (the) x1, ".";
				6:	"Se quitó ", (the) x1, ".";
				}
		}

	Drink:
		switch (_grammatical_inflection) {
		1,2,3:	"Eso no parece potable.";
		4,5,6:	"Eso no parecía potable.";
		}

	Drop:
		!!	1:	Error, el objeto dejado no está en poder del jugador, pero está 
		!!		en la localidad.
		!!	2:	Error, el objeto dejado no está en poder del jugador ni en la 
		!!		localidad,
		!!	3:	Aviso, el objeto era una prenda que el jugador llevaba puesta y 
		!!		la librería va a quitársela automáticamente para poder dejarla.
		!!	4:	Éxito.
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1:	"Para dejar ", (the) x1, " debería tener", (lo) x1, ".";
				2:	"Para dejar ", (the) x1, " deberías tener", (lo) x1, ".";
				3:	"Para dejar ", (the) x1, " debería tener", (lo) x1, ".";
				4:	"Para dejar ", (the) x1, " hubiese debido tener",
					(lo) x1, ".";
				5:	"Para dejar ", (the) x1, " hubieses debido tener",
					(lo) x1, ".";
				6:	"Para dejar ", (the) x1, " hubiese debido tener",
					(lo) x1, ".";
				}
			2:	switch (_grammatical_inflection) {
				1:	"No ", (lo) x1, " tengo.";
				2:	"No ", (lo) x1, " tienes.";
				3:	"No ", (lo) x1, " tiene.";
				4:	"No ", (lo) x1, " tenía.";
				5:	"No ", (lo) x1, " tenías.";
				6:	"No ", (lo) x1, " tenía.";
				}
			3:	switch (_grammatical_inflection) {
				1:	"(Primero me quito ", (the) x1, ".)";
				2:	"(Primero te quitas ", (the) x1, ".)";
				3:	"(Primero se quita ", (the) x1, ".)";
				4:	"(Primero me quité ", (the) x1, ".)";
				5:	"(Primero te quitaste ", (the) x1, ".)";
				6:	"(Primero se quitó ", (the) x1, ".)";
				}
			4:	"Dejad", (o) x1, ".";
		}

!! TODO - personalizar mensaje
	Eat:
		!!	1:	Error, el objeto no tiene el atributo "comestible".
		!!	2:	Éxito. [NOTA: la librería permite por defecto comerse
		!!		cualquier cosa que tenga el atributo "comestible", pero la
		!!		única acción que causa esto es que el objeto en cuestión
		!!		desaparece del juego al ser comido.]
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"Eso es simplemente incomestible.";
				4,5,6:	"Eso era simplemente incomestible.";
				}
			2:	switch (_grammatical_inflection) {
				1: "Me como ", (the) x1 ,". No está", (n) x1, " mal.";
				2: "Te comes ", (the) x1, ". No está", (n) x1, " mal.";
				3: "Se come ", (the) x1, ". No está", (n) x1, " mal.";
				4: "Me comí ", (the) x1, ". No estaba", (n) x1, " mal.";
				5: "Te comiste ", (the) x1, ". No estaba", (n) x1, " mal.";
				6: "Se comió ", (the) x1, ". No estaba", (n) x1, " mal.";
				}
		}

	EmptyT:
		!!	1:	Error, el jugador intenta vaciar un objeto en otro que no es un 
		!!		recipiente.
		!!	2:	Error, el jugador intenta vaciar un objeto sobre un recipiente 
		!!		cerrado.
		!!	3:	Error, el jugador intenta vaciar un objeto que no tiene nada 
		!!		dentro.
		!!	4:	Error, el jugador intenta vaciar un objeto sobre sí mismo.
		!!
		!! [NOTA: No hay mensajes de éxito para esta acción, ya que en caso
		!! de haber superado los test anteriores, la librería genera
		!! finalmente la acción Transferir, la cual a su vez, generará la
		!! acción PonerSobre o Meter, según el segundo objeto sea soporte o
		!! recipiente. Por tanto los mensajes de éxito serán los de las
		!! acciones PonerSobre o Meter.]
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	print_ret (The) x1, " no puede", (n) x1, 
						" tener cosas dentro.";
				4,5,6:	print_ret (The) x1, " no podía", (n) x1, 
						" tener cosas dentro.";
				}
			2:	switch (_grammatical_inflection) {
				1,2,3:	print_ret (The) x1, " ", (esta) x1, 
						" cerrad", (o) x1, ".";
				4,5,6:	print_ret (The) x1, " estaba", (n) x1, 
						" cerrad", (o) x1, ".";
				}
			3:	switch (_grammatical_inflection) {
				1,2,3:	print_ret (The) x1, " ya ", (esta) x1, 
						" vací", (o) x1, ".";
				4,5,6:	print_ret (The) x1, " ya estaba", (n) x1, 
						" vací", (o) x1, ".";
				}
			4:	switch (_grammatical_inflection) {
				1:	"No puedo vaciar un objeto sobre sí mismo.";
				2:	"No puedes vaciar un objeto sobre sí mismo.";
				3:	"No puede vaciar un objeto sobre sí mismo.";
				4:	"No podía vaciar un objeto sobre sí mismo.";
				5:	"No podías vaciar un objeto sobre sí mismo.";
				6:	"No podía vaciar un objeto sobre sí mismo.";
				}
		}

!! TODO - Probar acción
	Enter: ! [infsp] GoIn (Meterse) se cambió por Enter.
		!! CUIDADO. La acción Meterse se genera en muy diversas
		!! circunstancias: VETE HACIA EL PUENTE, VETE AL PUENTE, VETE POR
		!! EL PUENTE, PASA POR EL PUENTE, ENTRA EN EL PUENTE, ENTRA AL
		!! PUENTE, CRUZA EL PUENTE, CRUZA POR EL PUENTE, METETE EN EL
		!! PUENTE, METETE POR EL PUENTE, ATRAVIESA EL PUENTE, BAJA POR EL
		!! PUENTE.  Todas ellas generarían la acción <Meterse Puente>
		!!
		!! Además, los intentos de entrar en un "entrable", también, como
		!! por ejemplo: SIENTATE EN EL BANCO, ECHATE EN EL BANCO, SUBETE AL
		!! BANCO, SUBETE EN EL BANCO, SUBE AL BANCO, SUBE POR EL BANCO,
		!! SALTA AL BANCO. Todas ellas generarían <Meterse Banco>
		!!
		!! Puesto que hay muchos verbos diferentes que dan lugar a la misma
		!! acción, es necesaria alguna forma de imprimir qué verbo concreto
		!! ha sido el que la ha desencadenado, para poder generar mensajes
		!! como "No puedes entrar ahi", "No puedes sentarte ahi", "No
		!! puedes subirte ahi", etc.. según el verbo usado. Para esto puede
		!! usarse una llamada a IdiomaVerbo(palabra_verbo). palabra_verbo
		!! contiene el verbo usado por el jugador (convertido en forma
		!! imperativa), y IdiomaVerbo lo que hace es imprimir la forma
		!! infinitiva.
		!!
		!! Mensajes que puede generar esta acción:
		!!	1:	Error, el jugador ya está en/sobre el objeto.
		!!	2:	Error, el objeto al que intenta entrar/subirse el jugador no 
		!!		tiene el atributo "enterable".
		!!	3:	Error, el objeto al que intenta entrar/subirse el jugador tiene 
		!!		los atributos "container" y "enterable", pero está cerrado.
		!!	4:	Error, el objeto al que intenta entrar/subirse el jugador está 
		!!		en poder del propio jugador.
		!!	5:	Éxito, el jugador entra/sube al objeto.
		!!	6:	Aviso, el jugador estaba en otro objeto, la lib. intentará la 
		!!		acción SALIR automáticamente antes de reintentar entrar el 
		!!		nuevo objeto.
		!!	7:	Aviso, el objeto al que intenta entrar/subirse el jugador está 
		!!		dentro de otros objeto. La lib. intentará automáticamente meter 
		!!		al jugador en el objeto desde el cual pueda acceder al que el 
		!!		jugador le ha indicado.
		switch (n) {
			!! -- "Pero si ya estás sobre/en ", (the) x1, ".";
			1:	switch (_grammatical_inflection) {
				1:	print "Ya estoy ";
				2:	print "Ya estás ";
				3:	print "Ya está ";
				4:	print "Ya estaba ";
				5:	print "Ya estabas ";
				6:	print "Ya estaba ";
				}
				if (x1 has supporter) print "sobre "; else print "en ";
				print_ret (the) x1, ".";
			2:	switch (_grammatical_inflection) {
				1:	print "No es algo donde pueda ";
				2:	print "No es algo donde puedas ";
				3:	print "No es algo donde pueda ";
				4:	print "No es algo donde pudiese ";
				5:	print "No es algo donde pudieses ";
				6:	print "No es algo donde pudiese ";
				}
				LanguageVerb(verb_word); ".";
			3:	switch (_grammatical_inflection) {
				1:	print "No puedo ";
				2:	print "No puedes ";
				3:	print "No puede ";
				4:	print "No podía ";
				5:	print "No podías ";
				6:	print "No podía ";
				}
				LanguageVerb(verb_word);
				switch (_grammatical_inflection) {
				1,2,3:	" en ", (the) x1, " porque está", (n) x1,
						" cerrad", (o) x1, ".";
				4,5,6:	" en ", (the) x1, " porque estaba", (n) x1, 
						" cerrad", (o) x1, ".";
				}
			4:	switch (_grammatical_inflection) {
				1:	print "No voy a poder ";
				2:	print "No vas a poder ";
				3:	print "No va a poder ";
				4:	print "No iba a poder ";
				5:	print "No ibas a poder ";
				6:	print "No iba a poder ";
				}
				LanguageVerb(verb_word);
				switch (_grammatical_inflection) {
				1:	" ahí mientras no lo suelte.";
				2:	" ahí mientras no lo sueltes.";
				3:	" ahí mientras no lo suelte.";
				4:	" ahí mientras no lo soltase.";
				5:	" ahí mientras no lo soltases.";
				6:	" ahí mientras no lo soltase.";
				}
			5:	switch (_grammatical_inflection) {
				1:	if (x1 has supporter) print "Subo ", (al_) x1;
					else print "Entro en ", (the) x1;
					".";
				2:	if (x1 has supporter) print "Subes ", (al_) x1;
					else print "Entras en ", (the) x1;
					".";
				3:	if (x1 has supporter) print "Sube ", (al_) x1;
					else print "Entra en ", (the) x1;
					".";
				4:	if (x1 has supporter) print "Subí ", (al_) x1;
					else print "Entré en ", (the) x1;
					".";
				5:	if (x1 has supporter) print "Subiste ", (al_) x1;
					else print "Entraste en ", (the) x1;
					".";
				6:	if (x1 has supporter) print "Subió ", (al_) x1;
					else print "Entró en ", (the) x1;
					".";
				}
			6:	switch (_grammatical_inflection) {
				1:	if (x1 has supporter) print "(Me bajo ";
					else print "(Salgo ";
				2:	if (x1 has supporter) print "(Te bajas ";
					else print "(Sales ";
				3:	if (x1 has supporter) print "(Se baja ";
					else print "(Sale ";
				4:	if (x1 has supporter) print "(Me bajé ";
					else print "(Salí ";
				5:	if (x1 has supporter) print "(Te bajaste ";
					else print "(Saliste ";
				6:	if (x1 has supporter) print "(Se bajó ";
					else print "(Salió ";
				} print_ret (del_) x1, ".)";
			7:	switch (_grammatical_inflection) {
				1:	if (x1 has supporter) "(Me subo ", (al_) x1, ".)^";
					if (x1 has container) "(Me meto en ", (the) x1, ".)^";
					"(Entro en ", (the) x1, ".)^";
				2:	if (x1 has supporter) "(Te subes ", (al_) x1, ".)^";
					if (x1 has container) "(Te metes en ", (the) x1, ".)^";
					"(Entras en ", (the) x1, ".)^";
				3:	if (x1 has supporter) "(Se sube ", (al_) x1, ".)^";
					if (x1 has container) "(Se mete en ", (the) x1, ".)^";
					"(Entra en ", (the) x1, ".)^";
				4:	if (x1 has supporter) "(Me subí ", (al_) x1, ".)^";
					if (x1 has container) "(Me metí en ", (the) x1, ".)^";
					"(Entré en ", (the) x1, ".)^";
				5:	if (x1 has supporter) "(Te subiste ", (al_) x1, ".)^";
					if (x1 has container) "(Te metiste en ", (the) x1,".)^";
					"(Entraste en ", (the) x1, ".)^";
				6:	if (x1 has supporter) "(Se subió ", (al_) x1, ".)^";
					if (x1 has container) "(Se metió en ", (the) x1, ".)^";
					"(Entró en ", (the) x1, ".)^";
				}
		}

	Examine:
		!!	1:	Error, el jugador intenta examinar un objeto, pero está a 
		!!		oscuras.
		!!	2:	Éxito, pero el objeto examinado no tiene descripcion
		!!	3:	Éxito, pero el objeto examinado no tiene descripcion, aunque 
		!!		tiene el atributo conmutable, por lo que la librería genera 
		!!		este mensaje para indicar si está apagado o encendido.
		switch (n) {
			!! -- "Está demasiado oscuro, no puedes ver nada.";
			1:	switch (_grammatical_inflection) {
				1:	"Está demasiado oscuro. No puedo ver nada.";
				2:	"Está demasiado oscuro. No puedes ver nada.";
				3:	"Está demasiado oscuro. No puede ver nada.";
				4:	"Estaba demasiado oscuro. No podía ver nada.";
				5:	"Estaba demasiado oscuro. No podías ver nada.";
				6:	"Estaba demasiado oscuro. No podía ver nada.";
				}
			2:	switch (_grammatical_inflection) {
				1:	"No observo nada especial en ", (the) x1, ".";
				2:	"No observas nada especial en ", (the) x1, ".";
				3:	"No observa nada especial en ", (the) x1, ".";
				4:	"No observé nada especial en ", (the) x1, ".";
				5:	"No observaste nada especial en ", (the) x1, ".";
				6:	"No observó nada especial en ", (the) x1, ".";
				}
			3:	switch (_grammatical_inflection) {
					1,2,3:	print (The) x1, " ", (esta) x1;
					4,5,6:	print (The) x1, " estaba", (n) x1;
				}
				if (x1 has on) " encendid", (o) x1, ".";
				else " apagad", (o) x1,".";
		}

	Exit:
		!!	1:	Error, el jugador no está subido/sentado/metido en ningún
		!!		objeto. [Nota, si la localidad tiene la propiedad "afuera",
		!!		entonces la acción Salir lo sacará de la localidad. En caso
		!!		contrario es cuando se genera este error.]
		!!	2:	Error, el jugador está dentro de un recipiente cerrado.
		!!	3:	Éxito, el jugador sale/baja del objeto
		!!	4:	Error, más específico. [6/11]
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1:	print "No estoy en ningún sitio del que deba ";
				2:	print "No estás en ningún sitio del que debas ";
				3:	print "No está en ningún sitio del que deba ";
				4:	print "No estaba en ningún sitio del que debiese ";
				5:	print "No estabas en ningún sitio del que debieses ";
				6:	print "No estaba en ningún sitio del que debiese ";
				}
				LanguageVerb(verb_word); ".";
			2:	switch (_grammatical_inflection) {
				1:	"No puedo salir ", (del_) x1, " porque está", (n) x1, 
					" cerrad", (o) x1, ".";
				2:	"No puedes salir ", (del_) x1, " porque está", (n) x1,
					" cerrad", (o) x1, ".";
				3:	"No puede salir ", (del_) x1, " porque está", (n) x1,
					" cerrad", (o) x1, ".";
				4:	"No podía salir ", (del_) x1, " porque estaba", (n) x1,
					" cerrad", (o) x1, ".";
				5:	"No podías salir ", (del_) x1, " porque estaba", (n) x1,
					" cerrad", (o) x1, ".";
				6:	"No podía salir ", (del_) x1, " porque estaba", (n) x1,
					" cerrad", (o) x1, ".";
				}
			3:	switch (_grammatical_inflection) {
				1:	if (x1 has supporter) print "Bajo "; 
					else print "Salgo ";
				2:	if (x1 has supporter) print "Bajas "; 
					else print "Sales ";
				3:	if (x1 has supporter) print "Baja "; 
					else print "Sale ";
				4:	if (x1 has supporter) print "Bajé "; 
					else print "Salí ";
				5:	if (x1 has supporter) print "Bajaste "; 
					else print "Saliste ";
				6:	if (x1 has supporter) print "Bajó "; 
					else print "Salió ";
				} print_ret (del_) x1, ".";
			!! -- "Pero es que no estás ecima/dentro de ", (the) x1, ".";
			4:	switch (_grammatical_inflection) {
				1:	print "No puedo. No estoy ";
				2:	print "No puedes. No estás ";
				3:	print "No puede. No está ";
				4:	print "No podía. No estaba ";
				5:	print "No podías. No estabas ";
				6:	print "No podía. No estaba ";
				}
				if (x1 has supporter) print "encima "; else print "dentro ";
				print_ret (del_) x1, ".";
		}

	Fill:
		switch (_grammatical_inflection) {
		1:	"No puedo llenar", (lo) x1, ".";
		2:	"No puedes llenar", (lo) x1, ".";
		3:	"No puede llenar", (lo) x1, ".";
		4:	"No podía llenar", (lo) x1, ".";
		5:	"No podías llenar", (lo) x1, ".";
		6:	"No podía llenar", (lo) x1, ".";
		}

!! TODO - mensaje del parser
	FullScore:
		!! Puntuación en modo "explicativo". Puede activarse porque el
		!! jugador lo pida con el verbo "PUNTUACION LARGA" o porque el
		!! juego haya terminado (y la constante HAY_TAREAS esté definida).
		!!
		!!	1:	Texto introductorio al desglose de puntos
		!!	2:	Texto de objetos importantes (los que tienen el atributo
		!!		"valepuntos")
		!!	3:	Texto de lugares importantes (los que tienen el atributo
		!!		"valepuntos")
		!!	4:	Texto final, tras la suma total impresa por la librería
		switch (n) {
			1:	if (deadflag) print "La puntuación se desglosó ";
				else          print "La puntuación se desglosa ";
				"de la siguiente manera:^";
			2: "por encontrar objetos importantes";
			3: "por visitar lugares importantes";
			4: print "total (de ", MAX_SCORE ; ")";
		}

	GetOff:
		!! Esta acción se genera ante la frase SAL DEL ARMARIO o similares. 
		!! Ante SAL a secas la acción es Salir. Si el jugador no está en el 
		!! objeto indicado, se genera el siguiente mensaje de error. Si está, 
		!! la librería generará una acción Salir, por lo que el mensaje de 
		!! éxito será el de Salir.
		!! -- "Pero si no estás en ", (the) x1, ".";
		switch (_grammatical_inflection) {
		1:	"No puedo. No estoy en ", (the) x1 ,".";
		2:	"No puedes. No estás en ", (the) x1, ".";
		3:	"No puede. No está en ", (the) x1, ".";
		4:	"No podía. No estaba en ", (the) x1, ".";
		5:	"No podías. No estabas en ", (the) x1, ".";
		6:	"No podía. No estaba en ", (the) x1, ".";
		}

	Give:
		!!	1:	Error, el jugador intenta dar un objeto que no tiene.
		!!	2:	Error, el jugador se da el objeto a sí mismo.
		!!	3:	Aviso, se ha enviado la acción Dar al PNJ, pero este no ha
		!!		respondido. En este caso x1 apunta al PNJ y no al objeto
		!!		que le hemos dado.
		!!
		!! [Observar que por defecto el objeto sigue en poder del
		!! jugador. Si queremos que el PNJ lo acepte, hay que programarlo
		!! como parte de su rutina Vida.]
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1:	"No tengo ", (the) x1, ".";
				2:	"No tienes ", (the) x1, ".";
				3:	"No tiene ", (the) x1, ".";
				4:	"No tenía ", (the) x1, ".";
				5:	"No tenías ", (the) x1, ".";
				6:	"No tenía ", (the) x1, ".";
				}
			!! -- "Manoseas ", (the) x1, " un ratito, pero no consigues gran 
			!! -- cosa.";
			2:	switch (_grammatical_inflection) {
				1:	"Manoseo ", (the) x1, " durante unos momentos, sin 
					consiguir nada.";
				2:	"Manoseas ", (the) x1, " durante unos momentos, sin 
					conseguir nada.";
				3:	"Manosea ", (the) x1, " durante unos momentos, sin 
					conseguir nada.";
				4:	"Manoseé ", (the) x1, " durante unos momentos, sin 
					conseguir nada.";
				5:	"Manoseaste ", (the) x1, " durante unos momentos, sin 
					conseguir nada.";
				6:	"Manoseó ", (the) x1, " durante unos momentos, sin 
					conseguir nada.";
				}
			3:	switch (_grammatical_inflection) {
				1,2,3:	print_ret (The) x1, " no parece", (n) x1, 
						" interesad", (o) x1, ".";
				4,5,6:	print_ret (The) x1, " no parecía", (n) x1, 
						" interesad", (o) x1, ".";
				}
		}

	Go:
		!!	1:	Error, el jugador está dentro/subido en un objeto del que
		!!		tiene que salir antes.
		!!	2:	Error, la localidad no tiene salida en esa dirección (y tampoco 
		!!		tiene la propiedad "cant_go", ya que en este caso se habría 
		!!		impreso el valor de esa propiedad.
		!!	3:	Error, el jugador ha intentado ir hacia arriba, pero allí hay 
		!!		una puerta cerrada.
		!!	4:	Error, el jugador ha intentado ir hacia abajo, pero allí hay 
		!!		una puerta cerrada.
		!!	5:	Error, en la dirección que ha dicho el jugador hay una
		!!		puerta cerrada.
		!!	6:	Error, en la dirección que ha dicho el jugador hay una puerta, 
		!!		pero ésta no tiene una propiedad "door_to" (probablemente un 
		!!		error de programación del juego).
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1:	print "Tengo que ";
					if (x1 has supporter) print "bajarme ";
					else print "salir ";
				2:	print "Tienes que ";
					if (x1 has supporter) print "bajarte ";
					else print "salir ";
				3:	print "Tiene que ";
					if (x1 has supporter) print "bajarse ";
					else print "salir ";
				4:	print "Tenía que ";
					if (x1 has supporter) print "bajarme ";
					else print "salir ";
				5:	print "Tenías que ";
					if (x1 has supporter) print "bajarte ";
					else print "salir ";
				6:	print "Tenía que ";
					if (x1 has supporter) print "bajarse ";
					else print "salir ";
				}
				print_ret (del_) x1, " antes.";
			2:	switch (_grammatical_inflection) {
				1:	"No puedo ir por ahí.";
				2:	"No puedes ir por ahí.";
				3:	"No puede ir por ahí.";
				4:	"No podía ir por ahí.";
				5:	"No podías ir por ahí.";
				6:	"No podía ir por ahí.";
				}
			3:	switch (_grammatical_inflection) {
				1:	"Soy incapaz de trepar por ", (the) x1, ".";
				2:	"Eres incapaz de trepar por ", (the) x1, ".";
				3:	"Es incapaz de trepar por ", (the) x1, ".";
				4:	"Era incapaz de trepar por ", (the) x1, ".";
				5:	"Eras incapaz de trepar por ", (the) x1, ".";
				6:	"Era incapaz de trepar por ", (the) x1, ".";
				}
			4:	switch (_grammatical_inflection) {
				1:	"Soy incapaz de bajar por ", (the) x1, ".";
				2:	"Eres incapaz de bajar por ", (the) x1, ".";
				3:	"Es incapaz de bajar por ", (the) x1, ".";
				4:	"Era incapaz de bajar por ", (the) x1, ".";
				5:	"Eras incapaz de bajar por ", (the) x1, ".";
				6:	"Era incapaz de bajar por ", (the) x1, ".";
				}
			5:	switch (_grammatical_inflection) {
				1:	"No puedo pasar a través ", (del_) x1, ".";
				2:	"No puedes pasar a través ", (del_) x1, ".";
				3:	"No puede pasar a través ", (del_) x1, ".";
				4:	"No podía pasar a través ", (del_) x1, ".";
				5:	"No podías pasar a través ", (del_) x1, ".";
				6:	"No podía pasar a través ", (del_) x1, ".";
				}
			6:	switch (_grammatical_inflection) {
				1:	"No puedo ir porque ", (the) x1, " no lleva", (n) x1, 
					" a ningún sitio.";
				2:	"No puedes ir porque ", (the) x1, " no lleva", (n) x1, 
					" a ningún sitio.";
				3:	"No puede ir porque ", (the) x1, " no lleva", (n) x1, 
					" a ningún sitio.";
				4:	"No podía ir porque ", (the) x1, " no llevaba", (n) x1, 
					" a ningún sitio.";
				5:	"No podías ir porque ", (the) x1, " no llevaba", (n) x1,
					" a ningún sitio.";
				6:	"No podía ir porque ", (the) x1, " no llevaba", (n) x1, 
					" a ningún sitio.";
				}
		}

	Insert:
		!!	1:	Error, el objeto no está en poder del jugador. [Nota, conviene 
		!!		mirar en este caso si el objeto es animado o no, para generar 
		!!		un mensaje más adecuado].
		!!	2:	Error, el jugador intenta meter el objeto en otro que no tiene 
		!!		el atributo "container".
		!!	3:	Error, el jugador intenta meter el objeto en un recipiente
		!!		cerrado.
		!!	4:	Error, el objeto es una prenda que el jugador lleva puesta.
		!!		[ESTE MENSAJE NO SE GENERA NUNCA, PARECE UN BUG DE LA LIBRERÍA. 
		!!		Véase en su lugar el mensaje 6].
		!!	5:	Error, se intenta poner un objeto dentro de sí mismo.
		!!	6:	Aviso, el objeto es una prenda puesta, la librería va a 
		!!		quitársela de forma automática antes de reintentar Insert.
		!!	7:	Error, no queda sitio en el recipiente (el número de objetos 
		!!		que un recipiente puede contener se indica en su propiedad
		!!		"capacity").
		!!	8:	Éxito. Mensaje a mostrar para cada objeto metido cuando se
		!!		meten muchos (ej: METE TODO EN LA BOLSA).
		!!	9:	Éxito. Mensaje a mostrar cuando se mete un solo objeto dentro
		!!		de otro.
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1:	if (x1 has animate)
						"Antes tendría que ", (coge)"rl", (o) x1, " y no sé 
						si se dejará", (n) x1, ".";
					else
						"Necesito tener ", (the) x1, " para poder meter", 
						(lo) x1, " donde sea.";
				2:	if (x1 has animate)
						"Antes tendrías que ", (coge)"rl", (o) x1, " y no sabes 
						si se dejará", (n) x1, ".";
					else
						"Necesitas tener ", (the) x1, " para poder meter", 
						(lo) x1, " donde sea.";
				3:	if (x1 has animate)
						"Antes tendría que ", (coge)"rl", (o) x1, " y no sabe 
						si se dejará", (n) x1, ".";
					else
						"Necesita tener ", (the) x1, " para poder meter", 
						(lo) x1, " donde sea.";
				4:	if (x1 has animate)
						"Antes tendría que haber", (lo) x1, " cogido, y no 
						sé si ", (the) x1, " se hubiese", (n) x1, 
						" dejado.";
					else
						"Hubiese necesitado tener ", (the) x1, " para poder 
						meter", (lo) x1, " donde fuese.";
				5:	if (x1 has animate)
						"Antes tendrías que haber", (lo) x1, " cogido, y no 
						sabes si ", (the) x1, " se hubiese", (n) x1, 
						" dejado.";
					else
						"Hubieses necesitado tener ", (the) x1, " para poder 
						meter", (lo) x1, " donde fuese.";
				6:	if (x1 has animate)
						"Antes tendría que haber", (lo) x1, " cogido, y no 
						sabe si ", (the) x1, " se hubiese", (n) x1, 
						" dejado.";
					else
						"Hubiese necesitado tener ", (the) x1, " para poder 
						meter", (lo) x1, " donde fuese.";
				}
			2:	switch (_grammatical_inflection) {
				1,2,3:	"No se pueden meter cosas dentro ", (del_) x1, ".";
				4,5,6:	"No se podían meter cosas dentro ", (del_) x1, ".";
				}
			3:	switch (_grammatical_inflection) {
				1,2,3:	print_ret (The) x1, " ", (esta) x1, 
						" cerrad", (o) x1, ".";
				4,5,6:	print_ret (The) x1, " estaba", (n) x1, 
						" cerrad", (o) x1, ".";
				}
			4:	switch (_grammatical_inflection) {
				1:	"Tengo que quitárme", (lo) x1, " antes.";
				2:	"Tienes que quitárte", (lo) x1, " antes.";
				3:	"Tiene que quitárse", (lo) x1, " antes.";
				4:	"Tenía que quitárme", (lo) x1, " antes.";
				5:	"Tenías que quitárte", (lo) x1, " antes.";
				6:	"Tenía que quitárse", (lo) x1, " antes.";
				}
			5:	switch (_grammatical_inflection) {
				1:	"No puedo poner un objeto dentro de sí mismo.";
				2:	"No puedes poner un objeto dentro de sí mismo.";
				3:	"No puede poner un objeto dentro de sí mismo.";
				4:	"No podía poner un objeto dentro de sí mismo.";
				5:	"No podías poner un objeto dentro de sí mismo.";
				6:	"No podía poner un objeto dentro de sí mismo.";
				}
			6:	switch (_grammatical_inflection) {
				1:	"(Primero me ", (lo) x1, " quito.)^";
				2:	"(Primero te ", (lo) x1, " quitas.)^";
				3:	"(Primero se ", (lo) x1, " quita.)^";
				4:	"(Primero me ", (lo) x1, " quité.)^";
				5:	"(Primero te ", (lo) x1, " quitaste.)^";
				6:	"(Primero se ", (lo) x1, " quitó.)^";
				}
			7:	switch (_grammatical_inflection) {
				1,2,3:	"No queda sitio en ", (the) x1, ".";
				4,5,6:	"No quedaba sitio en ", (the) x1, ".";
				}
			8:	"Hecho.";
			9:	switch (_grammatical_inflection) {
				1:	"Meto ", (the) x1, " dentro ", (del_) second, ".";
				2:	"Metes ", (the) x1, " dentro ", (del_) second, ".";
				3:	"Mete ", (the) x1, " dentro ", (del_) second, ".";
				4:	"Metí ", (the) x1, " dentro ", (del_) second, ".";
				5:	"Metiste ", (the) x1, " dentro ", (del_) second, ".";
				6:	"Metió ", (the) x1, " dentro ", (del_) second, ".";
				}
		}

	Inv:
		!!	1:	Mensaje si el inventario está vacío
		!!	2:	Encabezado del inventario, antes de la lista de objetos 
		!!		generada por la librería
		!!	3 y 4: [6/11]
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1:	"No llevo nada.";
				2:	"No llevas nada.";
				3:	"No lleva nada.";
				4:	"No llevaba nada.";
				5:	"No llevabas nada.";
				6:	"No llevaba nada.";
				}
			2:	switch (_grammatical_inflection) {
				1:	print "Llevo";
				2:	print "Llevas";
				3:	print "Lleva";
				4:	print "Llevaba";
				5:	print "Llevabas";
				6:	print "Llevaba";
				}
			3:	print ":^";
			4:	print ".^";
		}

	Jump:
		switch (_grammatical_inflection) {
		1:	"Salto en el sitio, sin ningún resultado.";
		2:	"Saltas en el sitio, sin ningún resultado.";
		3:	"Salta en el sitio, sin ningún resultado.";
		4:	"Salté en el sitio, sin ningún resultado.";
		5:	"Saltaste en el sitio, sin ningún resultado.";
		6:	"Saltó en el sitio, sin ningún resultado.";
		}

	JumpOver, Tie:
		switch (_grammatical_inflection) {
		1:	"No lograré nada así.";
		2:	"No lograrás nada así.";
		3:	"No logrará nada así.";
		4:	"No hubiese logrado nada así.";
		5:	"No hubieses logrado nada así.";
		6:	"No hubiese logrado nada así.";
		}

	Kiss:
		!! -- "No creo que debas.";
		switch (_grammatical_inflection) {
		1:	"No creo que deba.";
		2:	"En realidad no crees que debas.";
		3:	"No cree que deba.";
		4:	"No se me ocurrió hacer algo así en aquel momento.";
		5:	"No se te ocurrió hacer algo así en aquel momento.";
		6:	"No se le ocurrió hacer algo así en aquel momento.";
		}

	Listen:
		switch (_grammatical_inflection) {
		1:	"No escucho nada fuera de lo común.";
		2:	"No escuchas nada fuera de lo común.";
		3:	"No escucha nada fuera de lo común.";
		4:	"No se escuchaba nada fuera de lo común.";
		5:	"No se escuchaba nada fuera de lo común.";
		6:	"No se escuchaba nada fuera de lo común.";
		}

	ListMiscellany:
		!! Los siguientes mensajes se muestran como aclaraciones cuando se está 
		!! listando el inventario del jugador, o los objetos que hay en una 
		!! localidad. Junto a cada mensaje se comenta qué condiciones deben 
		!! darse en ese objeto para que se muestre ese mensaje aclaratorio.
		switch (n) {
			1:	print " (alumbrando)";
			!! El objeto tiene "luz" y la localidad no
			2:	switch (_grammatical_inflection) {
				1,2,3:	print " (que ", (esta) x1, " cerrad", (o) x1, ")";
				4,5,6:	print " (que estaba", (n) x1, " cerrad", (o) x1, ")";
				}
			!! El objeto tiene "recipiente" pero no "abierto"
			3:	print " (cerrad", (o) x1, " y alumbrando)";
			!! Casos 2 y 1 juntos
			4:	switch (_grammatical_inflection) {
				1,2,3:	print " (que ", (esta) x1, " vací", (o) x1, ")";
				4,5,6:	print " (que estaba", (n) x1, " vací", (o) x1, ")";
				}
			!! El objeto es un recipiente abierto (o transparente) y no
			!!! tiene nada en su interior
			5:	print " (vací", (o) x1, " y alumbrando)";
			!! Casos 1 y 4 juntos
			6:	switch (_grammatical_inflection) {
				1,2,3:	print " (que ", (esta) x1, " cerrad", (o) x1, 
						" y vací", (o) x1, ")";
				4,5,6:	print " (que estaba", (n) x1, " cerrad", (o) x1,
						" y vací", (o) x1, ")";
				}
			!! El objeto tiene "recipiente", no "abierto", pero sí
			!! "transparente"
			7:	print " (cerrad", (o) x1, ", vací", (o) x1, " y 
				alumbrando)";
			!! Casos 1 y 6 juntos

			!! Los casos siguientes son similares, pero se muestran cuando se 
			!! solicita a la rutina EscribirListaDesde la opción INFOTOTAL. La 
			!! librería puede combinar varios de estos mensajes, por eso no 
			!! deben llevar el cerrado de paréntesis al final, que lo añade la 
			!! propia librería. *** NO SE ACONSEJA CAMBIAR ESTOS ***
    
			8:	switch (_grammatical_inflection) {
				1:	print " (alumbrando y que llevo puest", (o) x1;
				2:	print " (alumbrando y que llevas puest", (o) x1;
				3:	print " (alumbrando y que lleva puest", (o) x1;
				4:	print " (alumbrando y que llevaba puest", (o) x1;
				5:	print " (alumbrando y que llevabas puest", (o) x1;
				6:	print " (alumbrando y que llevaba puest", (o) x1;
				}
			!! El objeto tiene "luz" y "puesto"
			9: print " (alumbrando";
			!! El objeto tiene "luz" pero no "puesto"
			10:	switch (_grammatical_inflection) {
				1:	print " (que llevo puest", (o) x1;
				2:	print " (que llevas puest", (o) x1;
				3:	print " (que lleva puest", (o) x1;
				4:	print " (que llevaba puest", (o) x1;
				5:	print " (que llevabas puest", (o) x1;
				6:	print " (que llevaba puest", (o) x1;
				}
			!! El objeto tiene "puesto" pero no "luz"
			11:	switch (_grammatical_inflection) {
				1,2,3:	print " (que ", (esta) x1, " ";
				4,5,6:	print " (que estaba", (n) x1;
				}
			!! Mensaje introductorio para decir "que está
			!! abierto/cerrado/vacio"...
			12:	print "abiert", (o) x1;
			!! Objeto tiene "recipiente", "abrible" y "abierto" (y cosas dentro)
			13:	print "abiert", (o) x1, ", pero vací", (o) x1;
			!! Objeto tiene "recipiente", "abrible" y "abierto (pero vacio)
			14:	print "cerrad", (o) x1;
			!! Objeto tiene "recipiente", "abrible" y no "abierto"
			15: print "cerrad", (o) x1, " con llave";
			!! Objeto tiene "recipiente", "abrible" y "cerrojoechado" o 
			!! "cerrojo"
			16:	print " vací", (o) x1;
			!! Objeto tiene "recipiente", no "abrible" y "transparente"
			17:	switch (_grammatical_inflection) {
				1,2,3:	print " (que ", (esta) x1, " vací", (o) x1, ")";
				4,5,6:	print " (que estaba", (n) x1, " vací", (o) x1, ")";
				}
			!! Como el caso anterior, pero mensaje más "largo" (que se activa 
			!! si EscribirListaDesde es llamada sin el modo BREVE_BIT)
			18:	switch (_grammatical_inflection) {
				1,2,3:	print " que contiene", (n) x1, " ";
				4,5,6:	print " que contenía", (n) x1, " ";
			}
			!! encabezado a la lista de lo que hay dentro del objeto
			19: print " (sobre ", (el_) x1;
			!! Si el objeto tiene "soporte", la librería va a listar sus
			!! contenidos. Este es el encabezado de la lista
			20: print ", encima ", (del_) x1;
			!! Como e l9, pero en otra modalidad (que se activa si
			!! EscribirListaDesde es llamada sin el modo BREVE_BIT)
			21: print " (en ", (el_) x1;
			!! Si el contenido tiene "recipiente" y puede verse su interior
			!! y hay cosas, la librería va a mostrar sus contenidos. Este
			!! es el encabezado de la lista
			22: print ", dentro ", (del_) x1;
			!! Como el 21, pero en otra modalidad (que se activa si
			!! EscribirListaDesde es llamada sin el modo BREVE_BIT)
		}

	LMode1:
		!! La acción LMode1 se genera ante el comando BREVE. La librería 
		!! imprime la constante Story y a continuación este mensaje.
		print_ret (parser) "El relato está ahora en su modo ~breve~, que 
		da sólo descripciones largas de los lugares la primera vez que son 
		visitadas, y descripciones cortas en otro caso.";

	LMode2:
		!! La acción LMode2 se genera ante el comando LARGO (o NORMAL). La 
		!! librería imprime la constante Historia y a continuación este mensaje.
		print_ret (parser) "El relato está ahora en su modo normal 
		~largo~, que siempre da descripciones largas de los lugares (incluso si 
		ya habías estado antes).";

	LMode3:
		print_ret (parser) "El relato está ahora en su modo ~superbreve~, 
		que siempre da descripciones cortas de los lugares (incluso si nunca 
		habías estado antes).";

	Lock:
		!! Lock se genera con CIERRA <objeto> CON <objeto2>, o 
		!! también ante ECHA CERROJO A <objeto> (sin especificar un
		!! segundo objeto en este caso).
		!!
		!!	1:	Error, el objeto al que se intenta echar el cerrojo no tiene la 
		!!		propiedad "lockable".
		!!	2:	Error, el objeto al que se intenta echar el cerrojo tiene la 
		!!		propiedad "lockable", pero ya tiene también "locked".
		!!	3:	Error, el objeto tiene las propiedades "lockable" y "open". No 
		!!		se le puede echar el cerrojo hasta que no se cierre.
		!!	4:	Error, el <objeto2> especificado no coincide con el que el 
		!!		objeto indica en su propiedad "with_key".
		!!	5:	Éxito, se echa el cerrojo al objeto (con el <objeto2> si éste 
		!!		es especificado y se puede encontrar en la variable "second").
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"No parece", (n) x1, " tener ningún tipo de cerrojo.";
				4,5,6:	"No parecía", (n) x1," tener ningún tipo de cerrojo.";
				}
			2:	if (x1 provides with_key) {
					print_ret (The) x1, " ya estaba", (n) x1, 
					" cerrad", (o) x1, " con llave.";
				}
				else {
					switch (_grammatical_inflection) {
					1,2,3:	print_ret (The) x1, " ya tiene", (n) x1, 
							" echado el cerrojo.";
					4,5,6:	print_ret (The) x1, " ya tenía", (n) x1,
							" echado el cerrojo.";
					}
				}
			3:	switch (_grammatical_inflection) {
				1:	"Primero tendré que cerrar ", (the) x1, ".";
				2:	"Primero tendrás que cerrar ", (the) x1, ".";
				3:	"Primero tendrá que cerrar ", (the) x1, ".";
				4:	"Primero tenía que cerrar ", (the) x1, ".";
				5:	"Primero tenías que cerrar ", (the) x1, ".";
				6:	"Primero tenía que cerrar ", (the) x1, ".";
				}
			4:	if (second) switch (_grammatical_inflection) {
				1,2,3:	"No parece", (n) x1, " encajar en la cerradura.";
				4,5,6:	"No parecía", (n) x1, " encajar en la cerradura.";
				}
				switch (_grammatical_inflection) {
				1:	"Necesito algún tipo de llave.";
				2:	"Necesitas algún tipo de llave.";
				3:	"Necesita algún tipo de llave.";
				4:	"Necesitaba algún tipo de llave.";
				5:	"Necesitabas algún tipo de llave.";
				6:	"Necesitaba algún tipo de llave.";
				}
			5:	switch (_grammatical_inflection) {
				1:	if (second) "Cierro ", (the) x1, " con ", (the) second, ".";
					"Echo el cerrojo ", (al_) x1, ".";
				2:	if (second) "Cierras ", (the) x1, " con ", (the) second,".";
					"Echas el cerrojo ", (al_) x1, ".";
				3:	if (second) "Cierra ", (the) x1, " con ", (the) second, ".";
					"Echa el cerrojo ", (al_) x1, ".";
				4:	if (second) "Cerré ", (the) x1, " con ", (the) second, ".";
					"Eché el cerrojo ", (al_) x1, ".";
				5:	if (second) "Cerraste ", (the) x1," con ", (the) second,".";
					"Echaste el cerrojo ", (al_) x1, ".";
				6:	if (second) "Cerró ", (the) x1, " con ", (the) second, ".";
					"Echó el cerrojo ", (al_) x1, ".";
				}
		}

	Look:
		!! La acción Look se genera cuando el jugador pone MIRAR, pero también 
		!! de forma automática al entrar en una localidad nueva, o cuando el 
		!! jugador sale/se baja de un objeto en el que estaba.
		!!
		!! Algunos de los mensajes que se definen aquí aparecen en el "título" 
		!! de la localidad (lo que aparece en negrita antes de la descripción 
		!! de la localidad).
		!!
		!!	1:	Aclaración a añadir tras el título si el jugador está subido 
		!!		en un objeto.
		!!	2:	Aclaración a añadir tras el título si el jugador está dentro 
		!!		de un objeto.
		!!	3:	Aclaración a añadir tras el título si el jugador ha sido 
		!!		transformado en otro personaje mediante una llamada a 
		!!		ChangePlayer(nuevo, 1); (sin el 1, la librería no intentará 
		!!		mostrar este mensaje).
		!!	4:	Una vez que la librería ha mostrado la descripción de la 
		!!		localidad, si el jugador estaba encima de un supporter, la 
		!!		librería generará este mensaje 4 para mostrar qué más cosas 
		!!		hay sobre el supporter.
		!!	Restante: 5,6 [6/11] antes 'default'
		!!		Son usados por la librería para listar los objetos "simples" 
		!!		que hay en la localidad. Son objetos "simples" los que no 
		!!		dan su propia auto-descrcipcion a través de la propiedad 
		!!		"describe" o "initial".
		!!	7:	Respuesta estandar para MirarHacia [6/11]
		switch (n) {
			1:	print ", ";
				!! XXX: Se puede usar un mensaje de aclaración completamente 
				!! personalizado definiendo la propiedad "clarification" en un 
				!! objeto ("clarification" tiene que devolver un string o una 
				!! rutina encargada de imprimir un string). Ej: SALA DE ESTAR, 
				!! sentado en el sofá
				if ( x1 provides clarification ) {
					if (x1.clarification ofclass string) 
						print (string) x1.clarification;
					else if (x1.clarification ofclass routine)
						indirect(x1.clarification);
				}
				else print "sobre ", (the) x1;
			2:	print ", ";
				!! XXX: Ver comportamiento de Look con n == 1
				if ( x1 provides clarification ) {
					if (x1.clarification ofclass string) 
						print (string) x1.clarification;
					else if (x1.clarification ofclass routine)
						indirect( x1.clarification);
				}
				else print ", en ", (the) x1;
			3:	print " (como ", (object) x1 , ")";
			4:	print "^Sobre ", (the) x1;
				WriteListFrom(child(x1),
						ENGLISH_BIT + RECURSE_BIT + PARTINV_BIT
						+ TERSE_BIT + ISARE_BIT + CONCEAL_BIT);
				".";
			5,	!! XXX: Si la localidad actual tiene definida la propiedad 
			6:	!! "inhibit_object_list" y está establecida como verdadero, se 
				!! evita que se imprima el listado automático de objetos 
				!! simples junto con la descripción de la localidad
				if (real_location provides inhibit_object_list)
					if (real_location.inhibit_object_list)
						return true;

				new_line;
				if (x1~=location) {
					if (x1 has supporter) print "Sobre "; else print "En ";
					print (the) x1;
					switch (_grammatical_inflection) {
					1:	print " puedo ver ";
					2:	print " puedes ver ";
					3:	print " puede ver ";
					4:	print " podía ver ";
					5:	print " podías ver ";
					6:	print " podía ver ";
					}
				}
				else switch (_grammatical_inflection) {
				1:	print "Puedo ver ";
				2:	print "Puedes ver ";
				3:	print "Puede ver ";
				4:	print "Podía ver ";
				5:	print "Podías ver ";
				6:	print "Podía ver ";
				}
				if (n==5) print "también ";
				WriteListFrom(child(x1), 
					ENGLISH_BIT + WORKFLAG_BIT + RECURSE_BIT
					+ PARTINV_BIT + TERSE_BIT + CONCEAL_BIT);
				".";
			7:	switch (_grammatical_inflection) {
				1:	"No observo nada digno de mención al mirar hacia ", 
					(the) x1, ".";
				2:	"No observas nada digno de mención al mirar hacia ", 
					(the) x1, ".";
				3:	"No observa nada digno de mención al mirar hacia ",
					(the) x1, ".";
				4:	"No observé nada digno de mención al mirar hacia ", 
					(the) x1, ".";
				5:	"No observaste nada digno de mención al mirar hacia ",
					(the) x1, ".";
				6:	"No observó nada digno de mención al mirar hacia ",
					(the) x1, ".";
				}
			8:	if (x1 has supporter) print " (sobre "; else print " (en ";
				print (the) x1, ")";
		}

	LookUnder:
		!!	1:	Error, estamos a oscuras.
		!!	2:	Éxito, mensaje por defecto.
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"Está muy oscuro.";
				4,5,6:	"Estaba muy oscuro.";
				}
			2:	switch (_grammatical_inflection) {
				1:	"No veo nada interesante.";
				2:	"No ves nada interesante.";
				3:	"No ve nada interesante.";
				4:	"No vi nada interesante.";
				5:	"No viste nada interesante.";
				6:	"No vio nada interesante.";
				}
		}

!! TODO
	Mild:
		!! Respuesta si se usa como primera palabra algún insulto suave.
		"Bastante.";

	Miscellany:
		!! Esta es una falsa acción, que se usa simplemente para agrupar aquí 
		!! todos los mensajes de error del parser, los mensajes ante algunos 
		!! metacommandos, o algnouns mensajes de librería no relacionados con
		!! acción alguna. La asignación de números a mensajes es bastante
		!! caprichosa.
		switch (n) {
			1:
				!! El jugador ha especificado objetos multiples, pero el parser 
				!! tiene una lista que no admite más de 16, de modo que los 
				!! restantes objetos no serán procesados.
				!! -- "(Sólo considero los dieciséis primeros objetos)^";
				print_ret (parser) "Sólo se consideran los dieciséis 
				primeros objetos.";
			2:
				!! El jugador ha usado objetos múltiples, pero por alguna razón 
				!! la lista del parser está vacía.
				!! -- "¡No sé a qué objetos te refieres!";
				print_ret (parser) "No se pudo determinar a qué objetos 
				te has referido.";
			3:
				!! Mensaje de fin del relato. Has muerto.
				! TextoLlamativo(" Has muerto ");
				switch (_grammatical_inflection) {
				1:	print " He muerto ";
				2:	print " Has muerto ";
				3:	print " Ha muerto ";
				4:	print " Había muerto ";
				5:	print " Habías muerto ";
				6:	print " Había muerto ";
				}
!! TODO - probar
			4:
				!! Mensaje de fin del relato. Victoria.
				! TextoLlamativo(" Has ganado ");
				switch (_grammatical_inflection) {
				1:	print " He ganado ";
				2:	print " Has ganado ";
				3:	print " Ha ganado ";
				4:	print " Gané ";
				5:	print " Ganaste ";
				6:	print " Ganó ";
				}
!! TODO - mensaje del parser
			5:
				!! Mensaje a mostrar tras el fin del juego, para pedir al 
				!! jugador si quiere reniciar, recuperar, anular, puntuación, 
				!! curiosidades o terminar.
				print "^¿Quieres REINICIAR, RECUPERAR un juego guardado";
				#IFDEF DEATH_MENTION_UNDO;
					print ", ANULAR tu último movimiento";
				#ENDIF;
				! #IFNDEF NO_PUNTUACION;
					if (TASKS_PROVIDED==0)
						print ", ver la PUNTUACIÓN de este juego";
				! #ENDIF; ! NO_PUNTUACION
				if (deadflag==2 && AMUSING_PROVIDED==0)
					print ", ver algunas CURIOSIDADES";
				" o TERMINAR?";
			6:
				!! Error si el intérprete no tiene "undo"
				!! -- "[Tu intérprete no puede ~deshacer~ acciones, 
				!! ¡lo siento!]";
				print_ret (parser) "Tu intérprete no puede ~deshacer~ 
				acciones.";
			#Ifdef TARGET_ZCODE; ![6/11]
			!! Otro error si el intérprete no tiene "undo", pero no había 
			!! sido detectado correctamente.
			7:
				print_ret (parser) "~deshacer~ falló. (No todos los 
				intérpretes lo implementan.)";
			#Ifnot; ! TARGET_GLULX
			7:
				!! -- "[No puedes ~deshacer~ más.]";
				print_ret (parser) "No puedes ~deshacer~ más.";
			#Endif; ! TARGET_
			8:
				!! Si el jugador no responde correctamente a la pregunta del 
				!! mensaje [Miscellany,5]
				print_ret (parser) "Por favor, da una de las respuestas 
				anteriores.";
!! TODO - cambiar mensaje
			9:
				!! Mensaje cuando se detecta, al final del turno, que ya no hay 
				!! una fuente de luz en la localidad actual.
				switch (_grammatical_inflection) {
				1:	"^¡Me he quedado a oscuras!";
				2:	"^¡Te has quedado a oscuras!";
				3:	"^¡Se ha quedado a oscuras!";
				4:	"^¡Me quedé a oscuras!";
				5:	"^¡Te quedaste a oscuras!";
				6:	"^¡Se quedó a oscuras!";
				}
			10:
				!! Mensaje cuando el jugador introduce una linea en blanco.
				!! -- "¿Perdón?";
				<Look>;
				InformLibrary.end_turn_sequence();
				return true;
			11:
				!! Si el jugador intenta "undo" al principio del juego
				!! -- "[No puedes ~deshacer~ lo que no has hecho.]";
				print_ret (parser) "No se puede ~deshacer~ algo que no has 
				hecho.";
			12:
				!! Si el jugador pone "undo" dos veces.
				!! -- "[No puedes ~deshacer~ dos veces seguidas. ¡Lo siento!]";
				print_ret (parser) "No se puede ~deshacer~ dos veces 
				seguidas.";
			13:
				!! Éxito en el "undo".
				print_ret (parser) "Retrocediendo al turno anterior.";
			14:
				!! Si el jugador pone EEPA (verbo para corregir), pero el 
				!! parser no recordaba ninguna palabra mal. Ejmplo de uso del 
				!! comando EEPA:
				!!		> SACA MAZANA VERDE DE LA CESTA
				!!		No vqeo eso por aquí.
				!!		> EEPA MANZANA
				!!		Sacas la manzana verde de la cesta de mimbre.
				!! -- "Lo siento, eso no puede corregirse.";
				print_ret (parser) "Eso no puede corregirse.";
			15:
!! XXX
				!! Se usa EEPA sin especificar la palabra corregida.
				print_ret (parser) "Un fallo lo tiene cualquiera, no te 
				preocupes.";
			16:
				!! Si el jugador pone EEPA seguido de dos o más palabras.
				print_ret (parser) "~Eepa~ sólo puede corregir una 
				palabra.";
			17:
				!! Descripción del objeto Oscuridad.
				switch (_grammatical_inflection) {
				1:	"Está muy oscuro y no puedo ver nada.";
				2:	"Está muy oscuro y no puedes ver nada.";
				3:	"Está muy oscuro y no puede ver nada.";
				4:	"Estaba muy oscuro y no podía ver nada.";
				5:	"Estaba muy oscuro y no podías ver nada.";
				6:	"Estaba muy oscuro y no podía ver nada.";
				}
			18:
				!! Nombre corto del objeto jugador.
				switch (_grammatical_inflection) {
				1, 4:	print " mi mism", (o) player;
				2, 5:	print " ti mism", (o) player;
				3, 6:	print " si mism", (o) player;
				}
			19:
				!! Descripción del objeto jugador.
				!! -- "Tan buen aspecto como siempre.";
				<<Inv>>;
			20:
				!! Cuando el jugador pone PNJ, REPITE para que el PNJ haga otra 
				!! vez la última acción.
				print_ret (parser) "Para repetir un comando como ~rana, 
				salta~, escribe ~repite~, en lugar de ~rana, repite~.";
			21:
				!! Cuando el jugador pone REPITE como primer commando del juego.
				print_ret (parser) "No hay comando que repetir.";
			22:
				!! El jugador ha comenzado la frase con una coma.
				print_ret (parser) "No se puede empezar una frase con una 
				coma.";
			23:
				!! Cuando el jugador pone, por ejemplo; PEPE, COGE HACHA, pero 
				!! no hay un objeto que responda al name PEPE.
				!! -- "Parece que quieres hablar con alguien, pero no veo con 
				!! -- quién.";
				print_ret (parser) "Parece que has tratado de hablar con 
				alguien, pero no se pudo identificar con quién.";
			24:
				!! Si el jugador intenta hablar con un objeto que no es 
				!! "animate" ni "talkable" ("talkable" debe ponerse a objetos 
				!! inanimates con los que se podría hablar, como un micrófono).
				StartParserStyle();
				print "No puedes hablar con ", (the) x1, ".";
				EndParserStyle();
				new_line;
				return true;
			25:	!! XXX: Mensaje personalizado para el sistema de conversación
				!! Hay palabras no comprendidas entre el nombre de un PNJ y la 
				!! coma, ej: PEPE ZAFDSRGG, SALTA.
				!! -- "Para hablar con alguien intenta ~alguien, hola~ o algo 
				!! -- así.";
				print_ret (parser) "Para iniciar una conversación, usa 
				simplemente la orden HABLA (a/con) PERSONAJE.";
			26:
				!! La gramática especifica que una acción debe efectuarse sobre 
				!! un objeto en poder del jugador (token 'held'), pero el 
				!! jugador lo ha intentado sobre un objeto que no tiene, aunque 
				!! está a su alcance. El parser intentará automáticamente coger 
				!! ese objeto antes de efectuar la acción. En este mensaje se 
				!! avisa al jugador de esta intención.
				switch (_grammatical_inflection) {
				1:	"(Primero trato de ", (coge)"r ", (the) x1, ".)";
				2:	"(Primero tratas de ", (coge)"r ", (the) x1, ".)";
				3:	"(Primero trata de ", (coge)"r ", (the) x1, ".)";
				4:	"(Primero traté de ", (coge)"r ", (the) x1, ".)";
				5:	"(Primero trataste de ", (coge)"r ", (the) x1, ".)";
				6:	"(Primero trató de ", (coge)"r ", (the) x1, ".)";
				}

			!! ERRORES DE PARSING: Estos errores son generados por la librería, 
			!! a menos que el programador proporcione su propia función 
			!! ParserError para manejo de errores.

			! 27:	!! manejado por ParserError.
			! 28:	!! manejado por ParserError.
			! 29:	!! manejado por ParserError.
			! 30:	!! manejado por ParserError.
			! 31:	!! manejado por ParserError.
			! 32:	!! manejado por ParserError.
			! 33:	!! manejado por ParserError.
			! 34:	!! manejado por ParserError.
			! 35:	!! manejado por ParserError.
			! 36:	!! manejado por ParserError.
			! 37:	!! manejado por ParserError.
			! 38:	!! manejado por ParserError.
			! 39:	!! manejado por ParserError.
			! 40:	!! manejado por ParserError.
			! 41:	!! manejado por ParserError.
			! 42:	!! manejado por ParserError.
			! 43:	!! manejado por ParserError.

!! TODO - cambiar mensaje
			44:
				!! El jugador ha intentado objetos múltiples usando TODO 
				!! pero el parser no ha encontrado ninguno. Por ejemplo, COGE 
				!! TODO o DEJA TODO si no hay nada cerca o en el inventario. 
				!! Modificado en [020621] para dar un mensaje más coherente 
				!! si el jugador tiene algún objeto en su inventario.
				if (action_to_be == ##Drop) {
					print "¡Pero si no llevas nada";
					if (children (player)) " de eso!";
					else "!";
				}
				switch (_grammatical_inflection) {
				1,2,3:	print "No hay nada para ";
				4,5,6:	print "No había nada para ";
				}
				LanguageVerb(verb_word);
				".";
!! TODO - mensaje del parser
			45:
				!! El jugador ha nombrado un PNJ ambiguo (hay más de noun con 
				!! el mismo name cerca). El parser le pide aclaración. Este 
				!! mensaje es la primera parte de la pregunta, el resto lo pone 
				!! el parser (que es la lista de PNJs entre los que duda). 
				!! Debemos poner a 1 la variable PreguntaCualExactamente cuando 
				!! se generan este tipo de preguntas aclaratorias.
				print "¿Quién concretamente, ";
				PreguntaCualExactamente=1;
				ImprimirListaDudosos("o");
				!print "?^";
!! TODO - mensaje del parser
			46:
				!! El jugador ha nombrado un objeto ambiguo (hay más de objeto 
				!! con el mismo nombre cerca). El parser le pide aclaración. 
				!! Este mensaje es la primera parte de la pregunta, el resto lo 
				!! pone el parser (que es la lista de objetos entre los que 
				!! duda). Debemos poner a 1 la variable PreguntaCualExactamente 
				!! cuando se generan este tipo de preguntas aclaratorias.
				print "¿Cuál concretamente, ";
				PreguntaCualExactamente=1;
				ImprimirListaDudosos("o");
				!print "?^";
!! TODO - mensaje del parser
			47:
				!! El jugador ha respondido "TODOS" o "AMBOS" a una pregunta 
				!! aclaratoria como la anterior, pero el verbo no admite 
				!! objetos múltiples.
				print "Lo siento, sólo puedes referirte a un objeto aquí. ¿Cuál 
				exactamente?^";
				PreguntaCualExactamente=1;
!! TODO - Tienes que indicar a quien tiene que/quieres <comando>...
			48:
				!! El jugador ha escrito una frase u orden a PSI incompleta, 
				!! como BESA (verbo aplicado sobre PSIs normalmente). El parser 
				!! le pregunta para que complete la frase.
				StartParserStyle();
				PreguntaCualExactamente = 1;
				if (IniciarPregunta() ==0 ) print "A quién";
				if (actor ~= player) print " tiene que ";
				else print " quieres ";
				IdiomaImprimirComando();
				if (actor~=player) print " ", (the) actor;
				print "?";
				EndParserStyle();
				new_line;
!! TODO - Tienes que indicar qué tiene que/quieres <comando>...
			49:
				!! El jugador ha escrito una frase u orden incompleta, como 
				!! COGE (verbo aplicado sobre objetos normalmente). El parser 
				!! le pregunta para que complete la frase.
				StartParserStyle();
				PreguntaCualExactamente = 1;
				if (IniciarPregunta() ==0 ) print "Qué";
				if (actor ~= player) print " tiene que ";
				else print " quieres ";
				IdiomaImprimirComando();
				if (actor~=player) print " ", (the) actor;
				print "?";
				EndParserStyle();
				new_line;
			!#IFNDEF NO_PUNTUACION;
!! TODO - mensaje del parser
			50:
				!! El jugador acaba de realizar una acción que puntúa (la 
				!! librería ha detectado que la variable score ha cambiado de 
				!! valor). Se informa de ello al player. El parámetro x1 
				!! contiene el incremento (o decremento) en la puntuación.
				print "Tu puntuación ha ";
				if (x1 > 0) print "aumentado";
				else {
					x1 = -x1;
					print "disminuido";
				}
				print " en ", (number) x1, " punto";
				if (x1 > 1) print "s";
			!#ENDIF; ! NO_PUNTUACION
			51:
				!! El jugador ha intentado una acción con objeto múltiple 
				!! (como COGE TODO). Esta acción es convertida por el parser en 
				!! una serie de actiones COGE OBJETO1, COGE OBJETO2, etc... Si 
				!! en la ejecución de alguna de estas actiones encuentra que la 
				!! localidad del player ha cambiado, debe abortar el proceso. 
				!! Este mensaje informa de ello al jugador.
				!!	-- (Ya que ha ocurrido algo dramático, se ha recortado la 
				!!		lista de objetos sobre los que actuabas)
				print_ret (parser) "Algo que ha ocurrido algo que ha obligado 
				a recortar la lista de objetos sobre los que actuabas.";
			52:
				!! En los menús, se espera a que el player escriba un número 
				!! para mostrar una entrada del menú. Si pulsa un numero 
				!! incorrecto, se saca este mensaje. El parámetro x1 contiene 
				!! el número más alto válido.
				new_line;
				StartParserStyle();
				print "Escribe un número del 1 al ", x1, ", 0 para volver a 
				mostrarlo, o pulsa Intro.";
				EndParserStyle();
				new_line;
				return true;
			53:
				!! Mensaje que muestra el sistema de menús cuando espera una 
				!! tecla.
				new_line;
				print_ret (parser) "Por favor, pulsa ESPACIO.";
			54:
				print_ret (parser) "Comentario guardado.";
			55:
				print_ret (parser) "Comentario NO guardado.";
			56:
				print ".^";
			57:
				print "?^";
		}

	No:
		!! Cuando el jugador pone NO, a secas, se genera esta acción. Está 
		!! pensada por si el relato suelta una frase del estilo de "¿Pero tú 
		!! eres tonto?" y el jugador responde NO. De todas formas, hay un 
		!! problema, y es que NO es normalmente la acción Ir al noroeste. Si 
		!! queremos que NO sea provisionalmente la acción No, entonces se debe 
		!! poner a 1 la variable PreguntaSiNo antes de escribir el texto 
		!! "¿Pero tú eres tonto?". En ese caso, el parser interpretará "NO" 
		!! como la acción No, pero únicamente durante el siguiente turno.
		"Sólo era una pregunta retórica.";

	NotifyOff:
		print_ret (parser) "Notificación de puntuación desactivada.";

!!TODO - Mensaje del parser (parser_style)
	Objects:
		!! Ante el verbo "OBJETOS" se genera esta acción, que muestra una 
		!! lista de todos los objetos que el jugador ha manipulado a lo largo 
		!! del juego, junto con una indicación de qué hizo con ellos.
		!!
		!!	1:	Texto introductorio a la lista.
		!!	2:	Si no ha manejado aún ninguno.
		!!	3:	Indicación de que lo lleva puesto.
		!!	4:	Indicación de que lo lleva en su inventario.
		!!	5:	Indicación de quién lo tiene ahora (si lo tiene un PNJ).
		!!	6:	Indicación de dónde está el objeto (si está en una localidad).
		!!	7:	Indicación de dónde está el objeto (si está en un "entrable").
		!!	8:	Indicación de dónde está el objeto (si está en un recipiente).
		!!	9:	Indicación de dónde está el objeto (si está en un soporte).
		!!	10:	Indicación de que se ha perdido (no está en ninguno de los 
		!!		casos anteriores).
		switch (n) {
			1:	"Objetos que has manejado:^";
			2:	"Ninguno.";
!! TODO - usar x1
			3:	print "   (puesto)";
			4:	print "   (contigo)";
!! TODO - usar x1
			5:	print "   (dejado con alguien)";
			6:	print "   (ahora en ", (name) x1, ")";
			7:	print "   (ahora en ", (the) x1, ")";
			8:	print "   (ahora dentro ", (del_) x1, ")";
			9:	print "   (ahora en ", (the) x1, ")";
!! TODO - usar x1
			10:	print "   (perdido)";
		}

	Open:
		!!	1:	Error, el objeto no tiene el atributo "openable".
		!!	2:	Error, el objeto es abrible, pero tiene "locked".
		!!	3:	Error, el objeto es abrible, pero ya tiene el atributo "open".
		!!	4:	Éxito, el objeto se abre, y además era recipiente. Se muestra 
		!!		entoces la lista de objetos que había en su interior (si habia 
		!!		algo).
		!!	5:	Éxito, el objeto se abre (pero no tiene nada en su
		!!		interior, o no era recipiente).
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"No es algo que pueda abrirse.";
				4,5,6:	"No era algo que se pudiese abrir.";
				}
			2:	switch (_grammatical_inflection) {
				1,2,3:	"Está", (n) x1, " cerrad", (o) x1, " con llave.";
				4,5,6:	"Estaba", (n) x1, " cerrad", (o) x1, " con llave.";
				}
			3:	"Ya estaba", (n) x1, " abiert", (o) x1, ".";
			4:	switch (_grammatical_inflection) {
					1: print "Abro "; 	2: print "Abres ";	3: print "Abre ";
					4: print "Abrí ";	5: print "Abriste ";4: print "Abrió ";
				}
				print (the) x1, ", descubriendo ";
				if (WriteListFrom(child(x1), 
					ENGLISH_BIT + TERSE_BIT + CONCEAL_BIT) == 0)
					"que está", (n) x1, " vací", (o) x1, ".";
				".";
			5:	switch (_grammatical_inflection) {
					1: print "Abro "; 	2: print "Abres ";	3: print "Abre ";
					4: print "Abrí ";	5: print "Abriste ";4: print "Abrió ";
				}
				print_ret (the) x1, ".";
		}

!!	Order:	see Answer.
!!		switch (GRAMMATICAL_INFLEXION) {
!!		1,2,3:	print_ret (The) x1," tiene", (n) x1," mejores cosas que hacer.";
!!		4,5,6:	print_ret (The) x1," tenía", (n) x1," mejores cosas que hacer.";
!!		}

!! TODO - probar. mensaje del parser
	Places: 
		!! El verbo "LUGARES" muestra un listado de los lugares que el jugador 
		!! ha visitado. Aquí debemos escribir el texto introductorio a esa 
		!! lista.
		switch (n) {
			1:  print "Has visitado: ";
			2:  print ".^";
		}

	Pray:	!! XXX Personalizado
		switch (_grammatical_inflection) {
		1:	"Como si hubiese alguien que me fuera a escuchar...";
		2:	"No obtienes nada práctico de tus oraciones.";
		3:	"No obtiene nada práctico de sus oraciones.";
		4:	"Como si hubiese alguien que me fuera a escuchar...";
		5:	"No obtuviste nada práctico de tus oraciones.";
		6:	"No obtuvo nada práctico de sus oraciones.";
		}

	Prompt:
		!! El prompt aparece justo antes de pedir una nueva línea al jugador. 
		!! Puede definirse para que sea una frase, o se genere una frase 
		!! aleatoria en cada turno.
		new_line; print "> ";

	Pronouns:
		!! Esta acción (generada por el verbo PRONOMBRES) muestra una lista 
		!! de qué significa en ese momento para el parser cada pronombre: 
		!! -lo, -la, -los, -las...
		!!
		!!	1:	Texto introductorio.
		!!	2:	La palabra "es".
		!!	3:	Texto a mostrar si el pronombre no está definido.
		!!	4:	Si el juego no define pronombres.
		!!	5:	[6/11].
		switch (n) {
			1:	StartParserStyle();
				print "En este momento, ";
			2:	print "es ";
			3:	print "no está definido";
			4:	print "el juego no conoce ningún pronombre.";
				EndParserStyle();
				new_line;
				return true;
			5:	print ".";
				EndParserStyle();
				new_line;
				return true;
		}

	Pull, Push, Turn:
		!! Las acciones Pull, Push y Turn generan todas ellas los 
		!! mismos mensajes, pero pueden darse 4 casos:
		!!	1:	El objeto tiene el atributo 'static'.
		!!	2:	El objeto tiene el atributo 'scenery'.
		!!	3:	El objeto no es 'static' ni 'scenery'.
		!!	4:	El objeto es un ser animado.
		!! [Nota, si el objeto tiene ambos 'estatico' y 'escenario' se 
		!! está también en el caso 1.]
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"Está", (n) x1, " firmemente sujet", (o) x1, ".";
				4,5,6:	"Estaba", (n) x1, " firmemente sujet", (o) x1, ".";
				}
			2:	switch (_grammatical_inflection) {
				1:	"No soy capaz.";
				2:	"No eres capaz.";
				3:	"No es capaz.";
				4:	"No fui capaz.";
				5:	"No fuiste capaz.";
				6:	"No fue capaz.";
				}
			3:	switch (_grammatical_inflection) {
				1,2,3:	"No ocurre nada, aparentemente.";
				4,5,6:	"No ocurrió nada, aparentemente.";
				}
			4:	switch (_grammatical_inflection) {
				1,2,3:	"Eso sería, como poco, maleducado.";
				4,5,6:	"Eso hubiese sido, como poco, maleducado.";
				}
		}

!!	Push:	see Pull.

	PushDir:
		!! La acción PushDir se genera ante frases como EMPUJA EL COCHE HACIA 
		!! EL NORTE. Hay 3 casos posibles:
		!!	1:	Si el juego no ha previsto la posibilidad de empujar ese
		!!		objeto hacia una dirección (o sea, no llama a la rutina
		!!		PermitirEmujarDir). Esta es la respuesta por defecto más
		!!		habitual.
		!!	2:	Si el jugador pone tras HACIA algo que no es una dirección.
		!!		(respuesta por defecto en este caso).
		!!	3:	Si intenta empujar hacia arriba o hacia abajo.
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1:	"No creo que empujar ", (the) x1, " sirva de nada.";
				2:	"No crees que empujar ", (the) x1, " sirva de nada.";
				3:	"No cree que empujar ", (the) x1, " sirva de nada.";
				4:	"No creía que empujar ", (the) x1, " hubiese servido 
					de nada.";
				5:	"No creías que empujar ", (the) x1, " hubiese servido 
					de nada.";
				6:	"No creía que empujar ", (the) x1, " hubiese servido 
					de nada.";
				}
			2:	switch (_grammatical_inflection) {
				1,2,3:	"Eso no es una dirección.";
				4,5,6:	"Eso no era una dirección.";
				}
			3:	switch (_grammatical_inflection) {
				1:	"No, no puedo empujar", (lo) x1, " en esa dirección.";
				2:	"No, no puedes empujar", (lo) x1, " en esa dirección.";
				3:	"No, no puede empujar", (lo) x1, " en esa dirección.";
				4:	"No, no podía empujar", (lo) x1, " en esa dirección.";
				5:	"No, no podías empujar", (lo) x1, " en esa dirección.";
				6:	"No, no podía empujar", (lo) x1, " en esa dirección.";
				}
		}

	PutOn:
		!!	1:	Error, el objeto no está en poder del jugador. [Nota, conviene 
		!!		mirar en este caso si el objeto es animado o no, para generar 
		!!		un mensaje más adecuado].
		!!	2:	Error, el jugador intenta poner un objeto sobre sí mismo.
		!!	3:	Error, el jugador intenta poner el objeto sobre otro que no
		!!		tiene el atributo "supporter".
		!!	4:	Error, el jugador intenta poner un objeto sobre el propio
		!!		jugador.
		!!	5:	Aviso, el objeto es una prenda puesta. La librería va a
		!!		quitárselo automáticamente antes de reintentar la acción PutOn.
		!!	6:	Error, se intenta poner el objeto sobre otro en el que ya no
		!!		queda sitio (el número de objetos que caben en el soporte se
		!!		indica en su propiedad "capacity").
		!!	7:	Exito. Mensaje a mostrar para cada objeto puesto cuando se
		!!		ponen muchos (ej: PON TODO SOBRE LA MESA).
		!!	8:	Exito. Mensaje a mostrar cuando se pone un objeto sobre otro.
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1:	if (x1 has animate)
						"Antes tendría que ", (coge)"rl", (o) x1, " y no sé 
						si se dejará", (n) x1, ".";
					else
						"Necesito tener ", (the) x1, " para poder poner", 
						(lo) x1, " donde sea.";
				2:	if (x1 has animate)
						"Antes tendrías que ", (coge)"rl", (o) x1, " y no sabes 
						si se dejará", (n) x1, ".";
					else
						"Necesitas tener ", (the) x1, " para poder poner", 
						(lo) x1, " donde sea.";
				3:	if (x1 has animate)
						"Antes tendría que ", (coge)"rl", (o) x1, " y no sabe 
						si se dejará", (n) x1, ".";
					else
						"Necesita tener ", (the) x1, " para poder poner", 
						(lo) x1, " donde sea.";
				4:	if (x1 has animate)
						"Antes tendría que haber", (lo) x1, " cogido, y no 
						sabía si ", (the) x1, " se hubiese", (n) x1, 
						" dejado.";
					else
						"Hubiese necesitado tener ", (the) x1, " para poder 
						poner", (lo) x1, " donde fuese.";
				5:	if (x1 has animate)
						"Antes tendrías que haber", (lo) x1, " cogido, y no 
						sabías si ", (the) x1, " se hubiese", (n) x1, 
						" dejado.";
					else
						"Hubieses necesitado tener ", (the) x1, " para poder 
						poner", (lo) x1, " donde fuese.";
				6:	if (x1 has animate)
						"Antes tendría que haber", (lo) x1, " cogido, y no 
						sabía si ", (the) x1, " se hubiese", (n) x1, 
						" dejado.";
					else
						"Hubiese necesitado tener ", (the) x1, " para poder 
						poner", (lo) x1, " donde fuese.";
				}
			2:	switch (_grammatical_inflection) {
				1:	"No puedo poner un objeto sobre sí mismo.";
				2:	"No puedes poner un objeto sobre sí mismo.";
				3:	"No puede poner un objeto sobre sí mismo.";
				4:	"No podía poner un objeto sobre sí mismo.";
				5:	"No podías poner un objeto sobre sí mismo.";
				6:	"No podía poner un objeto sobre sí mismo.";
				}
			3:	switch (_grammatical_inflection) {
				1,2,3:	"Poner cosas sobre ", (the) x1," no servirá de nada.";
				4,5,6:	"Poner cosas sobre ", (the) x1, " no hubiese servido 
						de nada.";
				}
!! TODO - cambiar mensaje
			4:	switch (_grammatical_inflection) {
				1:	"Me falta destreza.";
				2:	"Te falta destreza.";
				3:	"Le falta destreza.";
				4:	"Me faltaba destreza.";
				5:	"Te faltaba destreza.";
				6:	"Le faltaba destreza.";
				}
			5:	switch (_grammatical_inflection) {
				1:	"(Primero me ", (lo) x1, " quito.)^";
				2:	"(Primero te ", (lo) x1, " quitas.)^";
				3:	"(Primero se ", (lo) x1, " quita.)^";
				4:	"(Primero me ", (lo) x1, " quité.)^";
				5:	"(Primero te ", (lo) x1, " quitaste.)^";
				6:	"(Primero se ", (lo) x1, " quitó.)^";
				}
			6:	switch (_grammatical_inflection) {
				1,2,3: "No queda sitio en ", (the) x1, " para poner nada más.";
				4,5,6: "No quedaba sitio en ", (the) x1," para poner nada más.";
				}
			7:	"Hecho.";
			8:	switch (_grammatical_inflection) {
				1:	"Coloco ", (the) x1, " sobre ", (the) second, ".";
				2:	"Colocas ", (the) x1, " sobre ", (the) second, ".";
				3:	"Coloca ", (the) x1, " sobre ", (the) second, ".";
				4:	"Coloqué ", (the) x1, " sobre ", (the) second, ".";
				5:	"Colocaste ", (the) x1, " sobre ", (the) second, ".";
				6:	"Colocó ", (the) x1, " sobre ", (the) second, ".";
				}
		}

	Quit:
		!!	1:	Respuesta al comando FIN.
		!!	2:	Respuesta si el jugador escribe algo distinto de "si" o "no".
		switch (n) {
			1:	StartParserStyle();
				print "Por favor, responde ";
				CreateLink("SÍ");
				print " o ";
				CreateLink("NO");
				print ":";
				EndParserStyle();
				print " ";
			2:	StartParserStyle();
				print "¿Realmente quieres abandonar el relato? (";
				CreateLink("SÍ");
				print "/";
				CreateLink("NO");
				print ")";
				EndParserStyle();
				print " ";
		}
		return true;

!! TODO - repasar mensajes
	Remove:
		!!	1:	El recipiente que contiene el objeto que el jugador quiere
		!!		sacar, está cerrado. (x1 apunta al objeto, no al recipiente, 
		!!		el cuál puede obtenerse con parent(x1)).
		!!	2:	El objeto no está dentro del recipiente que el jugador ha dicho.
		!!	3:	Éxito.
		switch (n) {
			1:	print "Por desgracia ", (the) parent( x1 );
				switch (_grammatical_inflection) {
				1,2,3:	print " está", (n) parent( x1 );
				4,5,6:	print " estaba", (n) parent( x1 );
				}	" cerrad", (o) parent( x1 ), ".";
			2:	switch (_grammatical_inflection) {
				1,2,3:	if (second has animate) 
							"¡Pero si no ", (lo) x1, " tiene", (n) second,"!";
						"¡Pero si no está", (n) x1, " ahí ahora!";
				4,5,6:	if (second has animate)
							"¡Pero si no ", (lo) x1, " tenía", (n) second,"!";
						"¡Pero si no estaba", (n) x1, " ahí!";
				}
			3:	if (verb_word == 'quita') "Quitad", (o) x1, ".";
				"Sacad", (o) x1, ".";
		}

	Restart:
		!!	1:	Respuesta al comando REINICIAR.
		!!	2:	Si no se puede reiniciar.
		switch (n) {
			1:	StartParserStyle();
				print "¿Realmente quieres reiniciar el relato? (";
				CreateLink("SÍ");
				print "/";
				CreateLink("NO");
				print ")";
				EndParserStyle();
				print " ";
			2:	print_ret (parser) "Error al reiniciar la partida.";
		}

	Restore:
		!!	1:	Si no se pudo cargar la partida con LOAD.
		!!	2:	Éxito (no llega a mostrarse, porque en caso de éxito el estado 
		!!		del juego cambia al momento en que se salvó. El "Ok" que se ve 
		!!		entonces es el del comando Salvar.
		switch (n) {
			1:	print_ret (parser) "Error. No se pudo recuperar la 
				partida.";
			2:	print (parser) "Partida cargada."; 
				new_line; <<Look>>; 
		}

	Rub:
		switch (_grammatical_inflection) {
		1,2,3:	"Ya ", (esta) x1, " bastante limpi", (o) x1, ".";
		4,5,6:	"Ya estaba", (n) x1, " bastante limpi", (o) x1, ".";
		}

	Save:
		!!	1:	Si no se pudo guardar el juego.
		!!	2:	Éxito.
		switch (n) {
			1:	print_ret (parser) "Error. No se pudo guardar la partida.";
			2:	print_ret (parser) "Partida guardada.";
		}

	Score:
		!! Puntuación del juego. Puede activarse porque el jugador lo pide 
		!! (con el verbo "PUNTUACION") o porque el juego ha terminado. En 
		!! este ultimo caso, la variable "deadflag" valdrá true.
		switch (n) {
			1:	StartParserStyle();
				if (deadflag) print "En este juego, tu puntuación ha sido ";
				else print "Hasta el momento tu puntuación es ";
				print score, " de un total de ", MAX_SCORE, 
				", en ", turns, " turno";
				if (turns>1) print "s";
				print ".";
				EndParserStyle();
				new_line;
				return;
			2:	print_ret (parser) "Este juego no tiene conteo de 
				puntuación.";
		}

	ScriptOff:
		!!	1:	Error ya estaba desactivada la transcrcipción.
		!!	2:	Éxito.
		switch (n) {
			1:	print_ret (parser) "La transcripción ya estaba 
				desactivada.";
			2:	new_line; print_ret (parser) "Fin de la transcripción.";
			3:	print_ret (parser) "Intento fallido de finalización de 
				transcripción.";
		}

	ScriptOn:
		!!	1:	Error, ya estaba activada la transcrcipción.
		!!	2:	Éxito (parte inicial del mensaje, la librería añade el título 
		!!		del juego obtenido de la constante Historia).
		switch (n) {
			1:	print_ret (parser) "La transcripción ya estaba activada.";
!! TODO - probar
			2:	print_ret (parser) "Iniciando la transcripción de:";
			3:	print_ret (parser) "Intento fallido de comienzo de la 
				transcripción.";
		}

	Search:
		!! La acción Search se genera ante la frase MIRA EN RECIPIENTE, MIRA EN 
		!! SOPORTE, REGISTRA OBJETO.
		!!
		!!	1:	Error, estamos a oscuras.
		!!	2:	Éxito examinando soporte, pero no hay nada sobre él.
		!!	3:	Éxito examinando soporte, listar lo que hay.
		!!	4:	El objeto examinado no es soporte ni recipiente, mensaje
		!!		estándar indicando que no se encuentra nada.
		!!	5:	Error, El objeto examinado es recipiente, pero está cerrado.
		!!	6:	Éxito, el objeto examinado es recipiente abierto, pero no
		!!		tiene nada dentro.
		!!	7:	Éxito, el objeto examinado es recipiente abierto y tiene
		!!		cosas dentro. Se las lista.
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"Está muy oscuro.";
				4,5,6:	"Estaba muy oscuro.";
				}
			2:	switch (_grammatical_inflection) {
				1,2,3:	"No hay nada sobre ", (the) x1, ".";
				4,5,6:	"No había nada sobre ", (the) x1, ".";
				}
!! TODO - comprobar funcionamiento
			3:	print "Sobre ", (the) x1;
				WriteListFrom(child(x1), 
					TERSE_BIT + ENGLISH_BIT + ISARE_BIT + CONCEAL_BIT);
				".";
			4:	switch (_grammatical_inflection) {
				1:	"No encuentro nada interesante.";
				2:	"No encuentras nada interesante.";
				3:	"No encuentra nada interesante.";
				4:	"No encontré nada interesante.";
				5:	"No encontraste nada interesante.";
				6:	"No encontró nada interesante.";
				}
			5:	switch (_grammatical_inflection) {
				1:	"No puedo ver lo que hay dentro ", (del_) x1, " porque ", 
					(esta) x1, " cerrad", (o) x1, ".";
				2:	"No puedes ver lo que hay dentro ", (del_) x1, " porque ", 
					(esta) x1, " cerrad", (o) x1, ".";
				3:	"No puede ver lo que hay dentro ", (del_) x1, " porque ", 
					(esta) x1, " cerrad", (o) x1, ".";
				4:	"No podía ver lo que hay dentro ", (del_) x1, " porque 
					estaba", (n) x1, " cerrad", (o) x1, ".";
				5:	"No podías ver lo que hay dentro ", (del_) x1, " porque 
					estaba", (n) x1, " cerrad", (o) x1, ".";
				6:	"No podía ver lo que hay dentro ", (del_) x1, " porque 
					estaba", (n) x1, " cerrad", (o) x1, ".";
				}
			6:	switch (_grammatical_inflection) {
				1,2,3:	print_ret (The) x1, " ", (esta) x1, 
						" vací", (o) x1, ".";
				4,5,6:	print_ret (The) x1, " estaba", (n) x1, 
						" vací", (o) x1, ".";
				}
			7:	print "En ", (the) x1;
				WriteListFrom(child(x1), 
					TERSE_BIT + ENGLISH_BIT + ISARE_BIT + CONCEAL_BIT);
				".";
		}

!! TODO - personalizar mensaje
	Set:
		!! Set sale ante la frase FIJA OBJETO o AJUSTA OBJETO
		switch (_grammatical_inflection) {
		1:	"No, no puedo.";
		2:	"No, no puedes.";
		3:	"No, no puede.";
		4:	"No, no podía.";
		5:	"No, no podías.";
		6:	"No, no podía.";
		}

	SetTo:
		!! SetTo sale ante la frase AJUSTA DIAL A 23 o FIJA CONTROL EN 
		!! ACTIVADO, o PON REGULADOR A 30
		switch (_grammatical_inflection) {
		1,2,3:	"Eso no puede regularse a ningún valor.";
		4,5,6:	"Eso no podía regularse a ningún valor.";
		}

	Show:
		!!	1:	Error, el jugador intenta mostrar un objeto que no tiene.
		!!	2:	Aviso, se ha enviado la acción Show al PNJ, pero este no ha 
		!!		respondido. En este caso x1 apunta al PNJ y no al objeto que 
		!!		le hemos mostrado.
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1:	"No tengo ", (the) x1, ".";
				2:	"No tienes ", (the) x1, ".";
				3:	"No tiene ", (the) x1, ".";
				4:	"No tenía ", (the) x1, ".";
				5:	"No tenías ", (the) x1, ".";
				6:	"No tenía ", (the) x1, ".";
				}
			2:	switch (_grammatical_inflection) {
				1,2,3:	print_ret (The) x1, " no muestra", (n) x1, 
						" ningún interés.";
				4,5,6:	print_ret (The) x1, " no mostraba", (n) x1, 
						" ningún interés.";
				}
		}

!! TODO - Personalizar mensaje
	Sing:
		switch (_grammatical_inflection) {
		1:	"Canto fatal.";
		2:	"Cantas fatal.";
		3:	"Canta fatal.";
		4:	"Cantaba fatal.";
		5:	"Cantabas fatal.";
		6:	"Cantaba fatal.";
		}
	Sleep:
		switch (_grammatical_inflection) {
		1:	"No estoy especialmente somnolient", (o) player, ".";
		2:	"No estás especialmente somnolient", (o) player, ".";
		3:	"No está especialmente somnolient", (o) player, ".";
		4:	"No estaba especialmente somnolient", (o) player, ".";
		5:	"No estabas especialmente somnolient", (o) player, ".";
		6:	"No estaba especialmente somnolient", (o) player, ".";
		}

	Smell:
		switch (_grammatical_inflection) {
		1:	"No huelo nada extraño.";
		2:	"No hueles nada extraño.";
		3:	"No huele nada extraño.";
		4:	"No olía nada extraño.";
		5:	"No olías nada extraño.";
		6:	"No olía nada extraño.";
		}

!! TODO -
	Sorry:
		!! Esta acción se genera si el jugador pone "LO SIENTO",
		!! "PERDONA" o cosas similares.
		print_ret "Oh, no es necesario que te disculpes.";

	Squeeze:
		!!	1:	Tratar de retorcer un ser animado.
		!!	2:	Cualquier otro objeto.
		switch (n) {
			!! -- "¡Las manos quietas!";
			1:	switch (_grammatical_inflection) {
				1:	"No creo que deba.";
				2:	"En realidad no crees que debas.";
				3:	"No cree que deba.";
				4:	"No se me hubiese ocurrido hacer algo así.";
				5:	"No se te hubiese ocurrido hacer algo así.";
				6:	"No se le hubiese ocurrido hacer algo así.";
				}
			2:	switch (_grammatical_inflection) {
				1:	"No consigo nada haciendo eso.";
				2:	"No consigues nada haciendo eso.";
				3:	"No consigue nada haciendo eso.";
				4:	"No conseguí nada haciendo eso.";
				5:	"No conseguiste nada haciendo eso.";
				6:	"No consiguió nada haciendo eso.";
				}
		}

!! TODO - Recomendar AYUDA
	Strong:
		!! Respuesta si se usa como primera palabra algún taco.
		!! "Los verdaderos aventureros no usan ese vocabulario.";
		print_ret (parser) "No vas a conseguir nada poniéndote hosco.";

!! TODO - Dar una respuesta más apropiada
	Swim:
		switch (_grammatical_inflection) {
		1,2,3:	"No hay agua suficiente en la que nadar.";
		4,5,6:	"No había agua suficiente en la que nadar.";
		}

	Swing:
		!! -- "No es adecuad", (o) x1, " para columpiarse.";
		switch (_grammatical_inflection) {
		1,2,3:	"No parece", (n) x1, " el lugar más adecuado en el que 
				columpiarse.";
		4,5,6:	"No parecía", (n) x1, " el lugar más adecuado en el que 
				columpiarse.";
		}

	SwitchOff:
		!!	1:	Error, el objeto no tiene el atributo "switchable".
		!!	2:	Error, el objeto ya tenia desactivado el atributo "on".
		!!	3:	Éxito, el objeto tiene ahora desactivado "on".
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"No es algo que pueda apagarse.";
				4,5,6:	"No era algo que se pudiese apagar.";
				}
			2:	"Ya estaba", (n) x1, " apagad", (o) x1, ".";
			3:	switch (_grammatical_inflection) {
				1:	"Apago ", (the) x1, ".";
				2:	"Apagas ", (the) x1, ".";
				3:	"Apaga ", (the) x1, ".";
				4:	"Apagué ", (the) x1, ".";
				5:	"Apagaste ", (the) x1, ".";
				6:	"Apagó ", (the) x1, ".";
				}
		}

	SwitchOn:
		!! Generada al intentar ENCIENDE OBJETO si el objeto tiene el 
		!! atributo "conmutable". Observar que si no lo tiene, la acción 
		!! que se genera será sin embargo Quemar.
		!!	1:	Error, el objeto no es conmutable (este error no aparecerá
		!!		si el jugador pone ENCIENDE OBJETO, ya que en este caso la
		!!		acción generada será Quemar objeto, pero puede aparecer si
		!!		pone CONECTA OBJETO).
		!!	2:	Error, el objeto ya tenía el atributo "on".
		!!	3:	Éxito, el objeto tiene ahora activado "on".
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"No es algo que pueda encenderse.";
				3,4,5:	"No era algo que se pudiese encender.";
				}
	    	2:	"Ya estaba", (n) x1, " encendid", (o) x1, ".";
	    	3:	switch (_grammatical_inflection) {
				1:	"Enciendo ", (the) x1, ".";
				2:	"Enciendes ", (the) x1, ".";
				3:	"Enciende ", (the) x1, ".";
				4:	"Encendí ", (the) x1, ".";
				5:	"Encendiste ", (the) x1, ".";
				6:	"Encendió ", (the) x1, ".";
				}
		}

	Take:
		!! Hay 13 casos diferentes. Se trata de 1 mensaje de éxito y 11 
		!! mensajes de error y un aviso:
		!!	1:	Éxito.
		!!	2:	Error, el objeto cogido es el propio jugador.
		!!	3:	Error, el objeto cogido es un objeto animado.
		!!	4:	Error, el jugador está subido o metido en el objeto que intenta 
		!!		coger.
		!!	5:	Error, el jugador ya tenía ese objeto en su inventario.
		!!	6:	Error, el objeto está en poder de un ser animado [x1 apunta 
		!!		al ser, no al objeto, el cual puede obtenerse en la variable 
		!!		"noun"].
		!!	7:	Error, el objeto es un sub-objeto de otro (está dentro de un
		!!		objeto que tiene el atributo "transparent", pero no tiene el
		!!		atributo "container" ni "supporter").
		!!	8:	Error, el objeto está dentro de otro, pero este otro no tiene 
		!!		el atributo "container" ni "supporter" ni "transparent" 
		!!		(probablemente un error de programación).
		!!	9:	Error, el objeto está dentro de un recipiente cerrado.
		!!	10:	Error, el objeto tiene el atributo "scenery".
		!!	11:	Error, el objeto tiene el atributo "static".
		!!	12:	Error, el jugador lleva demasiados objetos.
		!!	13: Mensaje de aviso, la librería ha decidido mover objetos del
		!!		inventario al "objeto saco" para hacer sitio y que el jugador
		!!		pueda coger el objeto. [El objeto saco es uno que puede
		!!		declarar el programador. Si el jugador lo coge y lo lleva
		!!		consigo, la librería lo usará automáticamente como mochila
		!!		para descargar al jugador cuando sea necesario].
		switch (n) {
			1:	if (dialecto_sudamericano) print "Tomad"; else print "Cogid";
				print_ret (o) noun, ".";
			2:	switch (_grammatical_inflection) {
				1:	"Siempre me tengo a mí mism", (o) player, ".";
				2:	"Siempre te tienes a tí mism", (o) player, ".";
				3:	"Siempre se tiene a sí mism", (o) player, ".";
				4:	"Siempre me he tenido a mí mism", (o) player, ".";
				5:	"Siempre te has tenido a tí mism", (o) player, ".";
				6:	"Siempre se ha tenido a sí mism", (o) player, ".";
				}
			3:	switch (_grammatical_inflection) {
				1:	"No creo que ", (al_) x1, " le", (s) x1, " gustara.";
				2:	"No crees que ", (al_) x1, " le", (s) x1, " gustara.";
				3:	"No cree que ", (al_) x1, " le", (s) x1, " gustara.";
				4:	"No creía que ", (al_) x1, " le", (s) x1, " hubiese 
					gustado.";
				5:	"No creías que ", (al_) x1, " le", (s) x1, " hubiese 
					gustado.";
				6:	"No creía que ", (al_) x1, " le", (s) x1, " hubiese 
					gustado.";
				}
			4:	switch (_grammatical_inflection) {
				1:	print "Tengo que ";
					if (x1 has supporter) print "bajarme "; 
					else print "salir ";
				2:	print "Tienes que ";
					if (x1 has supporter) print "bajarte ";
					else print "salir ";
				3:	print "Tiene que ";
					if (x1 has supporter) print "bajarse "; 
					else print "salir ";
				4:	print "Tenía que ";
					if (x1 has supporter) print "bajarme ";
					else print "salir ";
				5:	print "Tenías que ";
					if (x1 has supporter) print "bajarte ";
					else print "salir ";
				6:	print "Tenía que ";
					if (x1 has supporter) print "bajarse ";
					else print "salir ";
				}
				print_ret (del_) x1, " antes.";
			5:	switch (_grammatical_inflection) {
				1:	"Ya tengo ", (the) x1, ".";
				2:	"Ya tienes ", (the) x1, ".";
				3:	"Ya tiene ", (the) x1, ".";
				4:	"Ya tenía ", (the) x1, ".";
				5:	"Ya tenías ", (the) x1, ".";
				6:	"Ya tenía ", (the) x1, ".";
				}
			6:	switch (_grammatical_inflection) {
				1,2,3:	"Parece", (n) noun, " pertenecer ", (al_) x1, ".";
				4,5,6:	"Parecía", (n) noun, " pertenecer ", (al_) x1, ".";
				}
			7:	switch (_grammatical_inflection) {
				1,2,3:	"Parece", (n) noun, " formar parte ", (del_) x1, ".";
				4,5,6:	"Parecía", (n) noun, " formar parte ", (del_) x1, ".";
				}
			8:	switch (_grammatical_inflection) {
				1,2,3:	"No ", (esta) x1, " disponible", (s) x1, ".";
				4,5,6:	"No estaba", (n) x1, " disponible", (s) x1, ".";
				}
			9:	switch (_grammatical_inflection) {
				1,2,3:	print_ret (The) x1, " no ", (esta) x1, 
						" abiert", (o) x1, ".";
				4,5,6:	print_ret (The) x1, " no estaba", (n) x1, 
						" abiert", (o) x1, ".";
				}
			10:	switch (_grammatical_inflection) {
				1:	"Difícilmente podría llevarme eso.";
				2:	"Difícilmente podrías llevarte eso.";
				3:	"Difícilmente podría llevarse eso.";
				4:	"Difícilmente hubiese podido llevarme eso.";
				5:	"Difícilmente hubieses podido llevarte eso.";
				6:	"Difícilmente hubiese podido llevarse eso.";
				}
			11:	switch (_grammatical_inflection) {
				1,2,3:	print_ret (The) x1, " ", (esta) x1, 
						" fij", (o) x1, " en el sitio.";
				4,5,6:	print_ret (The) x1, " estaba", (n) x1, 
						" fij", (o) x1, " en el sitio.";
				}
			!! -- "Ya llevas demasiadas cosas.";
			12:	switch (_grammatical_inflection) {
				1:	"Ya tengo las manos ocupadas con demasiadas cosas.";
				2:	"Ya tienes las manos ocupadas con demasiadas cosas.";
				3:	"Ya tiene las manos ocupadas con demasiadas cosas.";
				4:	"Ya tenía las manos ocupadas con demasiadas cosas.";
				5:	"Ya tenías las manos ocupadas con demasiadas cosas.";
				6:	"Ya tenía las manos ocupadas con demasiadas cosas.";
				}
			!! -- "(colocas ", (the) x1, " en ", (the) SACK_OBJECT,
			!! -- " para hacer sitio)"
			13:	switch (_grammatical_inflection) {
				1:	print "Primero meto ", (the) x1;
				2:	print "Primero metes ", (the) x1;
				3:	print "Primero mete ", (the) x1;
				4:	print "Primero metí ", (the) x1;
				5:	print "Primero metiste ", (the) x1;
				6:	print "Primero metió ", (the) x1;
				}
				" en uno de los bolsillos del abrigo para dejar una mano 
				libre.";
		}

	Taste:
		switch (_grammatical_inflection) {
		1:	"No saboreo nada inesperado.";
		2:	"No saboreas nada inesperado.";
		3:	"No saborea nada inesperado.";
		4:	"No saboreé nada inesperado.";
		5:	"No saboreaste nada inesperado.";
		6:	"No soboreó nada inesperado.";
		}

!!	Tell:	see Answer.
!!		!!	1:	El jugador habla consigo mismo.
!!		!!	2:	Hablar con cualquier otro ser animado.
!!		!! [Nota: Hablar con un objeto inanimado no está permitido por el 
!!		!! parser, que da un error y no llega a generar la acción.]
!!		!! [Los errores de parser se tratan en la sección "Miscelanea" de 
!!		!! esta rutina, al final.]
!!		switch (n) {
!!			1:	switch (_grammatical_inflection) {
!!				1:	"Hablo sol", (o) player, " durante un rato.";
!!				2:	"Hablas sol", (o) player, " durante un rato.";
!!				3:	"Habla sol", (o) player, " durante un rato.";
!!				4:	"Hablé sol", (o) player, " durante un rato.";
!!				5:	"Hablaste sol", (o) player, " durante un rato.";
!!				6:	"Habló sol", (o) player, " durante un rato.";
!!				}
!!			2:	switch (_grammatical_inflection) {
!!				1:	"No he provocado ninguna reacción.";
!!				2:	"No has provocado ninguna reacción.";
!!				3:	"No ha provocado ninguna reacción.";
!!				4:	"No provoqué ninguna reacción.";
!!				5:	"No provocaste ninguna reacción.";
!!				6:	"No provocó ninguna reacción.";
!!				}
!!		}

	Think:
		!! -- "Vaya. Qué buena idea.";
		switch (_grammatical_inflection) {
		1:	"Si, eso intento.";
		2:	"Si, eso intentas.";
		3:	"Si, eso intenta.";
		4:	"Si, eso intentaba.";
		5:	"Si, eso intentabas.";
		6:	"Si, eso intentaba.";
		}

	ThrowAt:
		!!  1:	Lanzar cosas a objetos inanimados.
		!!	2:	Lanzar cosas a objetos animados.
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"No serviría de nada.";
				4,5,6:	"No hubiese servido de nada.";
				}
			2:	switch (_grammatical_inflection) {
				1:	"En el último momento me echo atrás.";
				2:	"En el último momento te echas atrás.";
				3:	"En el último momento se echa atrás.";
				4:	"En el último momento me eché atrás.";
				5:	"En el último momento te echaste atrás.";
				6:	"En el último momento se echó atrás.";
				}
		}

!!	Tie:	see JumpOver.

	Touch:
		!!	1:	Si se intenta tocar a un ser animado.
		!!	2:	Tocar un objeto normal del juego.
		!!	3: Tocarse a si mismo.
		switch (n) {
			!! "¡Las manos quietas!";
			1:	switch (_grammatical_inflection) {
				1:	"No creo que deba.";
				2:	"En realidad no crees que debas.";
				3:	"No cree que deba.";
				4:	"No creía que debiese hacer algo así.";
				5:	"En realidad no creías que debieses hacer algo así.";
				6:	"No creía que debiese hacer algo así.";
				}
			2:	switch (_grammatical_inflection) {
				1:	"No noto nada extraño al tacto.";
				2:	"No notas nada extraño al tacto.";
				3:	"No nota nada extraño al tacto.";
				4:	"No noté nada extraño al tacto.";
				5:	"No notaste nada extraño al tacto.";
				6:	"No notó nada extraño al tacto.";
				}
			!! "Si crees que eso servirá de algo...";
			3:	switch (_grammatical_inflection) {
				1:	"No creo que eso sirva de nada.";
				2:	"En realidad no crees que eso sirva de nada.";
				3:	"No cree que eso sirva de nada.";
				4:	"No creía que algo así hubiese servido de nada.";
				5:	"En realidad no creías que algo así hubiese servido de 
					nada.";
				6:	"No creía que algo así hubiese servido de nada.";
				}
    }

!!	Turn:	see Pull.

	Unlock:
		!! Unlock se genera ante ABRE <objeto> CON <objeto2>, o también 
		!! ante QUITA CERROJO A <objeto> (en este segundo caso no se 
		!! especifica la "llave" que abre la puerta).
		!!
		!!	1:	Error, el objeto que se intenta abrir, no tiene el atributo 
		!!		cerrojo.
		!!	2:	Error, el objeto que se intenta abrir tiene atributo "cerrojo", 
		!!		pero no tiene atributo "cerrojoechado".
		!!	3:	Error, el <objeto2> que se intenta usar como llave, no coincide 
		!!		con la propiedad "con_llave" del <objeto> que intenta ser 
		!!		abierto.
		!!	4:	Éxito. El <objeto> se abre (con <objeto2> si éste ha sido 
		!!		especificado, el cual podemos encontrarlo en la variable "otro".
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1,2,3:	"No parece", (n) x1, " tener ningún tipo de cerrojo.";
				4,5,6:	"No parecía", (n) x1, " tener ningún tipo de cerrojo.";
				}
			2:	print_ret (The) x1, " ya tenía", (n) x1, 
				" abierto el cerrojo.";
			3:	if (second) switch (_grammatical_inflection) {
				1,2,3:	"No parece", (n) x1, " encajar en la cerradura.";
				4,5,6:	"No parecía", (n) x1, " encajar en la cerradura.";
				}
				else switch (_grammatical_inflection) {
				1:	"Necesito algún tipo de llave.";
				2:	"Necesitas algún tipo de llave.";
				3:	"Necesita algún tipo de llave.";
				4:	"Necesitaba algún tipo de llave.";
				5:	"Necesitabas algún tipo de llave.";
				6:	"Necesitaba algún tipo de llave.";
				}
			4:	switch (_grammatical_inflection) {
				1:	if (~~second) "Quito el cerrojo ", (al_) x1, ".";
					"Quito el cerrojo ", (al_) x1, " con ", (the) second, ".";
				2:	if (~~second) "Quitas el cerrojo ", (al_) x1, ".";
					"Quitas el cerrojo ", (al_) x1, " con ", (the) second, ".";
				3:	if (~~second) "Quita el cerrojo ", (al_) second, ".";
					"Quita el cerrojo ", (al_) x1, " con ", (the) second, ".";
				4:	if (~~second) "Quité el cerrojo ", (al_) x1, ".";
					"Quité el cerrojo ", (al_) x1, " con ", (the) second, ".";
				5:	if (~~second) "Quitaste el cerrojo ", (al_) x1, ".";
					"Quitaste el cerrojo ",(al_) x1," con ", (the) second, ".";
				6:	if (~~second) "Quitó el cerrojo ", (al_) x1, ".";
					"Quitó el cerrojo ", (al_) x1, " con ", (the) second, ".";
				}
		}

!! TODO - mostrar salidas
	VagueGo:
		!! El jugador ha dicho IR sin especificar a dónde
		print_ret (parser) "Tienes que especificar en qué dirección ir.";

	Verify:
		!!	1:	Éxito.
		!!	2:	Error en la verificación.
		switch (n) {
			1:	print_ret (parser) "Fichero de juego verificado e 
				intacto.";
			2:	print_ret (parser) "El fichero de juego no parece intacto, 
				puede estar corrompido (a menos que estés jugando con un 
				intérprete muy primitivo que no sea capaz de realizar la 
				comprobación).";
		}

	Wait:
		switch (_grammatical_inflection) {
		1,2,3:	"Pasa el tiempo...";
		4,5,6:	"Pasaba el tiempo...";
		}

!! TODO dar respuesta adecuada
	Wake:
		switch (_grammatical_inflection) {
		1,2,3:	"La cruda realidad es que esto no es un sueño.";
		4,5,6:	"La cruda realidad es que aquello no era un sueño.";
		}

	WakeOther:
		switch (_grammatical_inflection) {
		1,2,3:	"No parece necesario hacer eso.";
		4,5,6:	"No parecía necesario hacer eso.";
		}

	Wave:
		!!	1:	Si se intenta agitar un objeto que no está en el inventario.
		!!	2:	Si se agita un objeto que sí está en el inventario.
		switch (n) {
			1:	switch (_grammatical_inflection) {
				1: "No l", (o) x1, " tengo.";
				2: "No l", (o) x1, " tienes.";
				3: "No l", (o) x1, " tiene.";
				4: "No l", (o) x1, " tenía.";
				5: "No l", (o) x1, " tenías.";
				6: "No l", (o) x1, " tenía.";
				}
			2:	switch (_grammatical_inflection) {
				1:	"Me siento ridícul", (o) player, " agitando ", 
					(the) x1, ".";
				2:	"Te sientes ridícul", (o) player, " agitando ", 
					(the) x1, ".";
				3:	"Se siente ridícul", (o) player, " agitando ", 
					(the) x1, ".";
				4:	"Me sentía ridícul", (o) player, " agitando ", 
					(the) x1, ".";
				5:	"Te sentías ridícul", (o) player, " agitando ", 
					(the) x1, ".";
				6:	"Se sentía ridícul", (o) player, " agitando ", 
					(the) x1, ".";
				}
		}

	WaveHands:
		!! La acción WaveHands se genera ante las frases "gesticula", "agita la 
		!! mano", "sacude la mano", "saluda con la mano", etc.
		switch (_grammatical_inflection) {
		1:	"Me veo ridícul", (o) player, " gesticulando así.";
		2:	"Te ves ridícul", (o) player, " gesticulando así.";
		3:	"Se ve ridícul", (o) player, " gesticulando así.";
		4:	"Me veía ridícul", (o) player, " gesticulando así.";
		5:	"Te veías ridícul", (o) player, " gesticulando así.";
		6:	"Se veía ridícul", (o) player, " gesticulando así.";
		}

	Wear:
		!! 1: Error, el objeto no tiene el atributo "clothing".
		!! 2: Error, el jugador no tiene el objeto.
		!! 3: Error, el objeto ya tiene el atributo "worn".
		!! 4: Éxito.
		switch (n) {
			!! "¡No puedes ponerte eso!";
			1:	switch (_grammatical_inflection) {
				1:	"No puedo ponerme eso.";
				2:	"No puedes ponerte eso.";
				3:	"No puede ponerse eso.";
				4:	"No podía ponerme eso.";
				5:	"No podías ponerte eso.";
				6:	"No podía ponerse eso.";
				}
			2:	switch (_grammatical_inflection) {
				1:	"No ", (lo) x1, " tengo.";
				2:	"No ", (lo) x1, " tienes.";
				3:	"No ", (lo) x1, " tiene.";
				4:	"No ", (lo) x1, " tenía.";
				5:	"No ", (lo) x1, " tenías.";
				6:	"No ", (lo) x1, " tenía.";
				}
			!! "¡Ya ", (lo) x1, " llevas puest", (o) x1, "!";
			3:	switch (_grammatical_inflection) {
				1:	"Ya ", (lo) x1, " llevo puest", (o) x1, ".";
				2:	"Ya ", (lo) x1, " llevas puest", (o) x1, ".";
				3:	"Ya ", (lo) x1, " lleva puest", (o) x1, ".";
				4:	"Ya ", (lo) x1, " llevaba puest", (o) x1, ".";
				5:	"Ya ", (lo) x1, " llevabas puest", (o) x1, ".";
				6:	"Ya ", (lo) x1, " llevaba puest", (o) x1, ".";
				}
			4:	switch (_grammatical_inflection) {
				1:	"Me pongo ", (the) x1, ".";
				2:	"Te pones ", (the) x1, ".";
				3:	"Se pone ", (the) x1, ".";
				4:	"Me puse ", (the) x1, ".";
				5:	"Te pusiste ", (the) x1, ".";
				6:	"Se puso ", (the) x1, ".";
				}
		}

	Yes:
		!! -- Es bueno ser positivo.
		print_ret (parser) "La orden 'si' no tiene sentido en esta situación.";

];


!!==============================================================================
!! Para errores SCENERY (el usuario a utilizado una palabra de la propiedad 
!! NAME de la localidad actual) provocados por una operación de tipo EXAMINAR, 
!! se lanza la acción ##Look que imprime una descripción de la localidad.
!!------------------------------------------------------------------------------
[ Handle_SCENERY_PE;
	if (action_to_be == ##Examine or ##Search or ##Consult) {
		<Look>; 
		InformLibrary.end_turn_sequence();
		return true;
	}
	print_ret (parser) "No es necesario referirse a eso para terminar 
	la historia.";
];


!!==============================================================================
!! Errores del parser
!!------------------------------------------------------------------------------
[ ParserError pe j;
	switch (pe) {
		STUCK_PE:
				!! #27: El parser se ha atascado. Es el tipo de error más 
				!! genérico. Si el parser puede, dará un error más concreto.
				!! -- "No entendí esa frase.";
				print_ret (parser) "No se pudo entender esa instrucción.";
		UPTO_PE:
				!! #28: Al parser le sobran palabras, aunque ha entendido gran 
				!! parte de la orden.
				!! -- print "Intenta de nuevo, porque sólo te pude entender: ";
				StartParserStyle();
				print "Intenta de nuevo porque solo se pudo entender que 
				quieres '"; PrintCommand(); print "'.";
				EndParserStyle();
				new_line;
				return true;
		NUMBER_PE:
				!! #29: El parser esperaba un token de tipo número.
				!! --"No comprendí ese número.";
				print_ret (parser) "No se pudo comprender ese número.";
		CANTSEE_PE:
				!! #30: El parser no ha comprendido el nombre del objeto al que 
				!! se refiere el jugador, o ese objeto no está aquí. 
				!! -- "No veo eso que dices.";
				print_ret (parser) "Te has referido a algo con lo que 
				no se puede interactuar en este momento.";
		TOOLIT_PE:
				!! #31: Este error parece que no se genera nunca. Un posible 
				!! bug de libreria, o restos de versiones arcaicas.
				!! -- "¡Pareces haber dicho muy poca cosa!";
				print_ret (parser) "Parece que has indicado demasiada 
				poca cosa.";
		NOTHELD_PE:
				!! #32: El objeto que el jugador intenta usar no está en su 
				!! poder. El parser ha intentado "cogerlo de forma automatica", 
				!! pero ha fallado.
				!! -- "¡No tienes eso!";
				switch (_grammatical_inflection) {
				1:	"No tengo eso.";
				2:	"No tienes eso.";
				3:	"No tiene eso.";
				4:	"No tenía eso.";
				5:	"No tenías eso.";
				6:	"No tenía eso.";
				}
		MULTI_PE:
				!! #33: El jugador ha intentado usar objetos múltiples (o 
				!! "TODO") con un verbo que en su gramática no lo admite.
				!! -- "No puedes especificar objetos múltiples con ese verbo.";
				!! TODO - probar
				StartParserStyle();
				print "No se pueden especificar objetos múltiples con '", 
				(address) verb_word ,"'.";
				EndParserStyle();
				new_line;
				return true;
		MMULTI_PE:
				!! #34: El player ha intentado objetos multiples para "noun" y 
				!! para "second", como en METE TODO EN TODO.
				!! -- "Sólo puedes especificar objetos múltiples una vez en 
				!! -- cada línea.";
				print_ret (parser) "Sólo se pueden especificar objetos 
				múltiples una vez en cada línea.";
		VAGUE_PE:
				!! #35: El jugador ha usado un pronombre, como COMELO, pero el 
				!! parser no tiene asignado un valor a ese pronombre.
				!! -- "No estoy seguro de a qué se refiere ~", 
				!! -- (address) pronoun_word, "~.";
				StartParserStyle();
				print "No está claro a qué te refieres con ~", 
				(address) pronoun_word ,"~.";
				EndParserStyle();
				new_line;
				return true;
		EXCEPT_PE:
				!! #36: El jugador ha puesto una lista de objetos y ha usado la 
				!! palabra EXCEPTO para exceptuar algo que no estaba incluido 
				!! en la lista, por ejemplo: COGE TODAS LAS MONEDAS EXCEPTO EL 
				!! SACO.
				print_ret (parser) "Has exceptuado algo que no estaba 
				incluido.";
		ANIMA_PE:
				!! #37: La gramática de un verbo obliga a que el objeto sobre 
				!! el que se actúe sea animate (tiene un token de tipo 
				!! "creature"), pero el jugador lo ha intentado sobre un objeto 
				!! que no es animate. 
				!! -- "Sólo puedes hacer eso con seres animados.";
				print_ret (parser) "Sólo se puede hacer eso con seres 
				animados.";
		VERB_PE:
				!! #38: La primera palabra usada por el jugador es desconocida 
				!! (o la primera palabra tras la comma, si se trata de una 
				!! orden a un PNJ).
				!! -- "No conozco ese verbo.";
				StartParserStyle();
				print "La acción '";
				for (j = 0: j < WordLength(1): j++) 
					print (char) WordAddress(1) -> j;
				print "' no está definida.";
				EndParserStyle();
				new_line;
				return true;
		SCENERY_PE:
				!! #39: El jugador intenta actiones sobre las palabras que 
				!! están en la propiedad "irrelevante" de la localidad.
				!! -- "Eso no es importante.";
				return Handle_SCENERY_PE();
				!! print_ret (parser) "No es necesario referirse a eso 
				!! para terminar la historia.";
		ITGONE_PE:
				!! #40: El jugador ha usado un proname, como EXAMINALO, pero el 
				!! pronombre se refiere a un objeto que ya no está visible. 
				StartParserStyle();
				print "Ahora mismo no puedes ver lo que representa el pronombre 
				~", (address) pronoun_word ,"~ (", (the) pronoun_obj ,").";
				EndParserStyle();
				new_line;
				return true;
		JUNKAFTER_PE:
				!! #41: Este error no sale nunca. Probablemente sigue aqui por 
				!! razones de compatibilidad, o por despiste de Graham ¿Tal vez 
				!! ha sido sustituido en versiones mas recients por el mensaje 
				!! número 28?
				!! -- "No entendí la última parte de la orden.";
				print_ret (parser) "No se pudo entender la última parte de 
				la orden.";
		TOOFEW_PE:
				!! #42: El jugador ha solicitado un numero de objetos en una 
				!! lista de objetos multiples, pero el parser no es capaz de 
				!! encontrar tantos. Por ejemplo: COGE SEIS MONEDAS.
				StartParserStyle();
				if (multi_had == 0) print "No hay suficientes disponibles.";
				else {
					print "Sólo hay ", (number) multi_had ," disponible";
					if ( multi_had ~= 1 ) print "s";
					print ".";
				}
				EndParserStyle();
				new_line;
				return true;
		NOTHING_PE:
				!! #43: El jugador ha puesto TODO como objeto múltiple, pero el 
				!! parser no ha encontrado ningún objeto. En realidad este 
				!! error parece no producirse nunca y el que acaba generándose 
				!! siempre es el siguiente (#44, ASKSCOPE_PE):
				!! -- "¡No encuentro nada para hacer eso!";
				print_ret (parser) "No se puede encontrar nada con lo que 
				hacer eso.";
		default:
				!! Error was NOT handled by this routine.
				return false;
	}
];


